<?xml version="1.0"?>
<doc>
<assembly>
<name>
atcSediment
</name>
</assembly>
<members>
<member name="M:atcSediment.modGrid.AreGridsCompatible(MapWinGIS.Grid,MapWinGIS.Grid,System.Boolean)">
	<summary>
 Determine if two grids are same size and located at same place
 </summary>
	<param name="g1">First Grid</param>
	<param name="g2">Second Grid</param>
	<param name="MustMatchExactly">If true, lower left corner must be at exact same location; otherwise may be offset by up to dx/2</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcSediment.modGrid.AverageGrid(System.String,System.String)">
	<summary>
 Given high-resolution source grid, average all values to a destination grid
 The source and destination grids must already exist (the destination should already be filtered for the desired area)
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcSediment.modGrid.CalcDownstream(System.String,System.String,System.String,System.String,atcSediment.modGrid.enumFlowOption,atcSediment.modGrid.enumCalcOption)">
	<summary>
 Given a flow direction grid, average or sum all values in the SourceGrid along the downstream path
 </summary>
	<param name="FlowDirGrid">Grid containing D8 flow directions</param>
	<param name="SourceGrid">Grid containing values to average or sum (ignored if CalcOption is Distance)</param>
	<param name="FlowPathGrid">Grid containing flow paths (NoDataValue for all overland flow cells, flow directions otherwise)</param>
	<param name="ResultGrid">Resulting downstream averages</param>
	<param name="FlowOption">Flag indicating whether averages are for overland or stream cells; if Both, then will find where overland connects to stream, and add stream travel time to all overland time in path</param>
	<param name="CalcOption">Flag indicating whether weight grid values should be averaged or totalled, or distance totalled, or travel times totalled</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcSediment.modGrid.CreateGrid(System.String,System.String,System.String,MapWinGIS.GridDataType)">
	<summary>
 Create a new grid and return new grid file name; will remove layer and delete grid first
 </summary>
	<param name="GridName">Name of layer to create</param>
	<returns>Grid filename</returns>
	<remarks></remarks>
</member><member name="M:atcSediment.modGrid.CreateGrid(System.String,System.String,MapWinGIS.GridDataType)">
	<summary>
 Create a new grid and return new grid file name; will remove layer and delete grid first; extents of layer based on Subbasins layer
 </summary>
	<param name="GridFile">Name of grid file to create</param>
	<returns>Grid filename</returns>
	<remarks></remarks>
</member><member name="M:atcSediment.modGrid.CreateThiessanGrid(System.String,System.String,System.String,System.String)">
	<summary>
 Create a new Thiessan polygon grid assigning numeric station ID to grid points; will remove layer and delete grid first if it exists
 The new grid will have the same extents as the subbasins layer
 </summary>
	<param name="GridFile">Name of layer to create</param>
	<param name="StationsLayer">Name of point layer containing stations</param>
	<param name="StationIDField">Field containing Station ID</param>
	<remarks></remarks>
</member><member name="M:atcSediment.modGrid.FilterGrid(System.String,System.String)">
	<summary>
 Given a grid over a large extent, set all values that fall outside of the filter layer shapes to NoData
 If filter layer is grid, will act as mask, setting all grid values to NoData if filter grid is NoData
 </summary>
	<param name="GridFile">Grid file that is to be filtered</param>
	<param name="FilterFile">Grid or shape file to act as filter; if grid, uses NoData values as filter; if shapefile uses all shapes as filter </param>
</member><member name="M:atcSediment.modGrid.GridsCompatible(MapWinGIS.Grid[])">
	<summary>
 Determine if all grids are same size and located nearly at same place
 </summary>
	<param name="Grids">List of grids to check</param>
</member><member name="M:atcSediment.modGrid.GridsIdentical(MapWinGIS.Grid[])">
	<summary>
 Determine if all grids are same size and located at exactly same place
 </summary>
	<param name="Grids">List of grids to check</param>
</member><member name="M:atcSediment.modGrid.LookupGrid(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,atcSediment.clsLookup})">
	<summary>
 Set values in grid to factor taken from ID in shape file using lookup table
 </summary>
	<param name="SourceShapeFile">Name of source shape file </param>
	<param name="FieldName">Name of field containing lookup value</param>
	<param name="DestGridFile">Name of destination grid file (must already exist)</param>
</member><member name="M:atcSediment.modGrid.LookupGrid(System.String,System.String,System.Collections.Generic.Dictionary{System.String,atcSediment.clsLookup})">
	<summary>
 Set values in grid to factor taken from ID in grid file using lookup table
 </summary>
	<param name="SourceGridFile">Name of source grid file </param>
	<param name="DestGridFile">Name of destination grid file (must already exist)</param>
</member><member name="M:atcSediment.modGrid.LookupGrid(System.String,System.String,atcSediment.modGrid.LookupDelegate,MapWinGIS.GridDataType)">
	<summary>
 Set values in destination grid based on delegate function
 </summary>
	<param name="SourceGridFile">Name of source grid file containing key values that will be looked up</param>
	<param name="DestGridFile">Name of destination grid file (if doesn't exist, will be created)</param>
	<param name="LookupFunction">Delegate function that takes source grid value and computes destination grid value</param>
	<param name="DataType">Optional grid data type for grid to be created</param>
</member><member name="M:atcSediment.modGrid.MultiplyGrid(System.String,System.Double,System.String)">
	<summary>
 Multiply two grids and put result in third grid (or back into source grid)
 </summary>
	<param name="SourceFile">Name of source grid file</param>
	<param name="DestFile">Name of destination grid file that will be created (if blank, will put results back in source grid)</param>
	<returns>True if successful</returns>
</member><member name="M:atcSediment.modGrid.MultiplyGrid(System.String,System.String,System.String)">
	<summary>
 Multiply two grids and put result in third grid (or back into source grid)
 </summary>
	<param name="SourceFile">Name of source grid file</param>
	<param name="MultFile">Name of grid file containing multipliers</param>
	<param name="DestFile">Name of destination grid file that will be created (if blank, will put results back in source grid)</param>
	<returns>True if successful</returns>
</member><member name="M:atcSediment.modGrid.MultiplyGrid_LS(System.String,System.String,System.Double)">
	<summary>
 Multiply two grids and put result in third grid (or back into source grid) (Special version to compute LS factor)
 </summary>
	<param name="SlopeGridFile">Name of source grid file (slopes)</param>
	<param name="LSGridFile">Name of destination LS grid file that will be created</param>
	<returns>True if successful</returns>
</member><member name="M:atcSediment.modGrid.ResampleGrid(System.String,System.String,System.String)">
	<summary>
 Take high-resolution source grid and create lower resolution destination grid
 The source and destination grids must already exist
 </summary>
	<param name="SourceGridFile">Name of high-resolution grid file</param>
	<param name="DestGridFile">Name of existing lower-resolution grid file that will be written to</param>
	<param name="MaskShapeFile">If non-blank, is polygon shapefile name used to mask output file</param>
</member><member name="M:atcSediment.modGrid.SetGrid(System.String,System.Double)">
	<summary>
 Set all grid values to fixed value 
 </summary>
	<param name="DestGridFile">Destination grid file (must already exist)</param>
	<param name="Value">Constant value to set entire grid to</param>
</member><member name="M:atcSediment.modGrid.SetGrid(System.String,System.String,System.Int32,System.Double)">
	<summary>
 Given a grid over a large extent, set all values that fall inside a filter layer shape to specified value
 </summary>
	<param name="DestGridFile">Destination grid file (must already exist)</param>
	<param name="FilterShapeFile">Name of shape file to use as filter</param>
	<param name="ShapeIndex">Index of shape in shape file to use as filter</param>
	<param name="Value">Constant value to set entire grid to</param>
</member><member name="M:atcSediment.modGrid.TabulateAreasInShape(System.String,System.String,System.Int32)">
	<summary>
 Given an integer grid where the value represents a station ID (like a theissan), tabulate all areas within the selected shape
 Returned dictionary key is the integer grid value, value is area in sq km
 </summary>
</member><member name="M:atcSediment.modGrid.ApplyColoringScheme(System.String,MapWinGIS.PredefinedColorScheme)">
	<summary>
 Apply predefined coloring scheme to grid layer
 </summary>
	<param name="LayerName">Name of layer</param>
	<param name="ColoringScheme">Predefined coloring scheme</param>
</member><member name="M:atcSediment.modGrid.ApplyColoringScheme(System.String,System.String,System.Drawing.Color,System.String,System.Drawing.Color,System.Double)">
	<summary>
 Apply custom coloring scheme to grid layer (two ranges, each with separate color)
 </summary>
	<param name="LayerName">Name of layer</param>
	<param name="Caption1">Caption assigned to lower range</param>
	<param name="Color1">Color assigned to lower range</param>
	<param name="Caption2">Caption assigned to upper range</param>
	<param name="Color2">Color assigned to upper range</param>
	<param name="BreakValue">Grid value that separates two ranges</param>
</member><member name="M:atcSediment.modGrid.DeleteGrid(System.String)">
	<summary>
 Remove grid layer if it exists, and delete all files associated with grid
 </summary>
	<param name="GridFile">Name of grid file to delete</param>
</member><member name="P:atcSediment.modGrid.LastErrorMsg">
	<summary>
 Store error messages from deep within routines so caller can handle later; if string is empty, no error occurred
 </summary>
</member><member name="M:atcSediment.modGrid.ShapefileToGrid(System.String,System.String,System.String)">
	<summary>
 Given shape file with numeric field, create or overwrite grid values
 </summary>
	<param name="ShapeFile">Name of shape file</param>
	<param name="FieldName">Name of field with numeric values (if blank, will use shape index plus 1)</param>
	<param name="GridFile">Name of new or existing grid file; if not found will be created</param>
</member><member name="M:atcSediment.modGrid.ClipGridWithShapefile(System.String,System.String,System.String)">
	<summary>
 Given a source grid file, clip it to all shapes in a shapefile (setting all clipped grid points to -1) and create new grid file
 </summary>
	<param name="GridFile">Source grid file to be clipped</param>
	<param name="ShapeFile">Shapefile containing shapes to clip to</param>
	<param name="NewGridFile">New grid file containing clipped grid</param>
	<returns>True if successful</returns>
</member><member name="M:atcSediment.PlugIn.MapMouseMove(System.Int32,System.Int32,System.Boolean@)">
	<summary>
 Debugging tool that displays value of currently selected grid or all polygon shape file field values as your mouse moves over them
 This is useful for checking the computed grids and quickly seeing if the grids add up
 </summary>
	<remarks>Turn this off for final version</remarks>
</member><member name="M:atcSediment.frmSediment.LoadForm">
	<summary>
 Move data from Project structure into form fields
 </summary>
</member><member name="M:atcSediment.frmSediment.SaveForm">
	<summary>
 Move data from form fields into Project structure
 </summary>
</member><member name="T:atcSediment.clsTkCallback">
	<summary>
 This class is used when I call TauDEM functions which need a callback function
 </summary>
</member><member name="M:atcSediment.Sediment.structProject.CellAreaKm">
	<summary>
 Return the current gridsize expressed as square kilometers
 </summary>
</member><member name="M:atcSediment.Sediment.GIRASLayers(System.Int32)">
	<summary>
 GIRAS land use consists of multiple layers; these shapefiles are contained as field values in the "Land Use Index" layer
 This routine will return the list of shapefiles contained in the GIRAS landuse coverages
 Will return empty list if an error occurs
 </summary>
	<param name="BasinLayerIndex">Layer index associated with subbasins</param>
</member><member name="M:atcSediment.Sediment.LayerOK(System.String,System.String,System.String,System.String)">
	<summary>
 Determine if layer and/or field are available
 </summary>
	<param name="LayerType">Text description so warning message is more descriptive if not found.</param>
	<param name="TabName">Name of tab for warning message</param>
	<param name="LayerName">Name of layer</param>
	<param name="FieldName">Name of field (if applicable)</param>
</member><member name="M:atcSediment.Sediment.ReadLine(System.IO.StreamReader)">
	<summary>
 Read tab-delimited set of items 
 </summary>
</member><member name="M:atcSediment.Sediment.SaveData">
	<summary>
 Save project data to .Sediment file
 </summary>
</member><member name="M:atcSediment.Sediment.SedimentLayer(atcSediment.Sediment.enumSedimentLayers)">
	<summary>
 Return name of predefined layer used for sediment utility
 </summary>
	<param name="SedLayer">Type of sediment layer</param>
	<returns>Name of layer</returns>
	<remarks>This helper routine written to give intellisense help for returning standard layer names</remarks>
</member><member name="M:atcSediment.Sediment.SummaryReport">
	<summary>
 After all sediment calculations are complete, echo project data, GIS map snapshots, and summary results to HTML report that will be displayed on the last tab of the main form
 </summary>
	<returns>Name of .htm output file that was created</returns>
</member><member name="M:atcSediment.Sediment.TabulateAreas(System.String,System.String)">
	<summary>
 Given a detailed shapefile or grid layer (e.g., land use), tabulate areas within each subbasin
 </summary>
	<param name="LayerName">Name of detailed layer</param>
	<param name="FieldName">Name of shapefile field to summarize by (ignored if LayerName refers to grid file)</param>
</member><member name="M:atcSediment.Sediment.AppendLookupTable(HTMLBuilder.clsHTMLBuilder,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,atcSediment.clsLookup})">
	<summary>
 Create HTML table containing Erosion factors and areas
 </summary>
	<param name="hb">Active HTMLBuilder</param>
	<param name="TableName">Desired title to be placed before table</param>
	<param name="LayerName">GIS layer name (e.g., soil shapfile layer)</param>
	<param name="LayerField">If layer is shapefile, fieldname used for lookup</param>
	<param name="LookupDict">Dictionary that related lookup ID with USLE factors</param>
</member><member name="M:atcSediment.Sediment.AppendResultsTable(HTMLBuilder.clsHTMLBuilder,System.String)">
	<summary>
 Create HTML table containing USLE final results
 </summary>
	<param name="hb">Active HTMLBuilder</param>
	<param name="TableName">Desired title to be placed before table</param>
</member><member name="M:atcSediment.Sediment.AppendUSLESummaryTable(HTMLBuilder.clsHTMLBuilder,System.Int32)">
	<summary>
 Create HTML table containing summary of USLE factors used for specified subbasin
 </summary>
	<param name="hb">Active HTMLBuilder</param>
	<param name="SubbasinIndex">Index number of desired subbasin</param>
</member><member name="M:atcSediment.Sediment.ErrorMsg(System.String,System.Exception)">
	<summary>
 Display error message
 </summary>
	<param name="ErrorText">Error text to display</param>
	<param name="ex">Exception (will display traceback info)</param>
</member><member name="M:atcSediment.Sediment.LoadData(System.String)">
	<summary>
 Load all settings and coefficients from data file; if blank will load from default file
 </summary>
	<param name="Filename"></param>
	<remarks></remarks>
</member><member name="M:atcSediment.Sediment.WriteLine(System.IO.StreamWriter,System.Object[])">
	<summary>
 Write tab-delimited set of items
 </summary>
	<param name="sw"></param>
	<param name="item"></param>
	<remarks></remarks>
</member><member name="M:atcSediment.Sediment.GetControlValue(System.String,System.Windows.Forms.Control@,System.String)">
	<summary>
 Get last (or default) value for specified control that was saved in the registry
 </summary>
	<param name="RegAppName">Name of application</param>
	<param name="Cntl">Control to retrieve value for</param>
	<param name="DefaultValue">If not already in registry, will set to this value (text, checked, or selected index)</param>
	<remarks></remarks>
</member><member name="M:atcSediment.Sediment.GetControlValues(System.String,System.Windows.Forms.Control@)">
	<summary>
 Get last values for all controls on a form that was saved in the registry (default values cannot be set explictly, will use defaults from designer)
 </summary>
	<param name="RegAppName">Name of application</param>
	<param name="Container">Form or control containing controls to set values for</param>
	<remarks>Want to get and set in order of tag index, as there may be cascading events</remarks>
</member><member name="M:atcSediment.Sediment.SaveControlValue(System.String,System.Windows.Forms.Control@)">
	<summary>
 Save value for specified control to registry
 </summary>
	<param name="RegAppName">Name of application</param>
	<param name="Cntl">Control to set value for</param>
	<remarks></remarks>
</member><member name="M:atcSediment.Sediment.SaveControlValues(System.String,System.Windows.Forms.Control@)">
	<summary>
 Save values for all controls on a form to registry
 </summary>
	<param name="RegAppName">Name of application</param>
	<param name="Container">Form or control containing controls to set values for</param>
	<remarks>Want to get and set in order of tag index, as there may be cascading events</remarks>
</member><member name="T:atcSediment.Sediment">
	<summary>
 This module contains all computational routines for the sediment utility
 </summary>
</member><member name="P:atcSediment.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:atcSediment.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:atcSediment.My.Resources.Resources.Defaults">
	<summary>
  Looks up a localized string similar to Version	1
Output name:	Project 1
Grid cell size:	300
Subbasins layer:	subbasin2
Soil layer:	State Soil
Soil type ID:	MUID
Landuse type:	1
Landuse layer:	NLCD_LandCover_1992
Landuse ID:	
Road layer:	
Road ID:	
DEM layer:	Digital Elevation Model
DEM units:	Meters
Rainfall factor:	300
Num Erodibility:	346
GA001	HARTSELLS	0.1904
GA002	HARTSELLS	0.2345
GA003	NELLA	0.2021
GA004	SHACK	0.3633
GA005	CONASAUGA	0.3772
GA006	SHACK	0.2902
GA007	SHACK	0.2778
GA008	MINVALE	0.3327
GA009	HOLSTON	0.321 [rest of string was truncated]";.
</summary>
</member><member name="P:atcSediment.My.Resources.Resources.R_Factors">
	<summary>
  Looks up a localized string similar to State	County	Min R	Avg R	Max R
Alabama	Autauga	375	375	375
Alabama	Baldwin	550	550	550
Alabama	Barbour	375	387	400
Alabama	Bibb	375	375	375
Alabama	Blount	325	325	325
Alabama	Bullock	375	375	375
Alabama	Butler	425	425	425
Alabama	Calhoun	325	325	325
Alabama	Chambers	325	337	350
Alabama	Cherokee	300	300	300
Alabama	Chilton	375	375	375
Alabama	Choctaw	425	425	425
Alabama	Clarke	450	450	450
Alabama	Clay	350	350	350
Alabama	Cleburne	325	325	325
Alabama	Coffee	450	450	450
Alabama	Colbert	300	300 [rest of string was truncated]";.
</summary>
</member><member name="T:atcSediment.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:atcSediment.frmProgress.SetProgress(System.Int32,System.Int32)">
	<summary>
 Set the current and maximum value for the progress bar; if cancel was pressed, will return false
 </summary>
</member><member name="M:atcSediment.frmProgress.SetProgressOverall(System.String,System.Int32,System.Int32)">
	<summary>
 Set the status text and current and maximum value for the progress bar; if cancel was pressed, will return false
 </summary>
</member><member name="M:atcSediment.frmProgress.SetProgress(System.String,System.Int32,System.Int32)">
	<summary>
 Set the status text and current and maximum value for the progress bar; if cancel was pressed, will return false
 </summary>
</member><member name="M:atcSediment.frmProgress.SetProgress(System.String,System.Windows.Forms.ProgressBarStyle)">
	<summary>
 Set the status text and progressbar style to marquee; if cancel was pressed, will return false
 </summary>
</member><member name="P:atcSediment.frmProgress.IsCancelled">
	<summary>
 Return True if cancel button was pressed
 </summary>
</member><member name="P:atcSediment.frmProgress.ProgressMax">
	<summary>
 Maximum value of progress bar; defaults to 100
 </summary>
</member><member name="P:atcSediment.frmProgress.ProgressValue">
	<summary>
 Value of progress bar; will force to be between 0 and maximum value; defaults to 0
 </summary>
</member><member name="P:atcSediment.frmProgress.Status">
	<summary>
 Text to appear in the status window; if not set will default to "Computing..."
 </summary>
</member><member name="T:atcSediment.frmProgress">
	<summary>
 Modeless form showing task status text and progressbar and cancel button
 </summary>
</member>
</members>
</doc>