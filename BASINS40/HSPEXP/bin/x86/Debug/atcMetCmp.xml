<?xml version="1.0"?>
<doc>
<assembly>
<name>
atcMetCmp
</name>
</assembly>
<members>
<member name="M:atcMetCmp.modMetCompute.SolarRadiationFromCloudCover(atcData.atcTimeseries,atcData.atcTimeseriesSource,System.Double)">
	<summary>
 Compute daily solar radiation based on daily cloud cover
 </summary>
	<param name="aCldTSer">Cloud Cover timeseries</param>
	<param name="aSource"></param>
	<param name="aLatDeg">Latitude, in degrees</param>
	<returns>Daily solar radiation timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.CloudCoverTimeseriesFromSolar(atcData.atcTimeseries,atcData.atcTimeseriesSource,System.Double)">
	<summary>
 Compute daily cloud cover based on daily solar radiation 
 </summary>
	<param name="aDSolTSer">Daily solar radiation timeseries</param>
	<param name="aSource"></param>
	<param name="aLatDeg">Latitude, in degrees</param>
	<returns>Daily cloud cover timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.PanEvaporationTimeseriesComputedByHamonX(atcData.atcTimeseries,atcData.atcTimeseriesSource,System.Boolean,System.Double,System.Double[])">
	<summary>
 Compute HAMON PET from less than daily air temperature timeseries
 </summary>
	<param name="aTemperature"></param>
	<param name="aSource"></param>
	<param name="aDegF">Temperature in Degrees F (True) or C (False)</param>
	<param name="aLatDeg">Latitude, in degrees</param>
	<param name="aCTS"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.PanEvaporationTimeseriesComputedByHamon(atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseriesSource,System.Boolean,System.Double,System.Double[])">
	<summary>compute Hamon - PET</summary>
	<param name="aTMinTS">Min Air Temperature - daily</param>
	<param name="aTMaxTS">Max Air Temperature - daily</param>
	<param name="aSource"></param>
	<param name="aDegF">Temperature in Degrees F (True) or C (False)</param>
	<param name="aLatDeg">Latitude, in degrees</param>
	<param name="aCTS">Monthly variable coefficients</param>
	<returns>Daily Pan Evaporation</returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.PanEvaporationTimeseriesComputedByPenman(atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseriesSource)">
	<summary>compute Penman - PET</summary>
	<param name="aTMinTS">Min Air Temperature - daily</param>
	<param name="aTMaxTS">Max Air Temperature - daily</param>
	<param name="aSRadTS">Solar Radiation</param>
	<param name="aDewPTS">Dewpoint Temperature</param>
	<param name="aWindTS">Wind Movement</param>
	<param name="aSource"></param>
	<returns>Pan Evaporation timeseries - daily timestep</returns>
	<remarks>The computations are based on the Penman(1948) formula and the method of Kohler, Nordensen, and Fox (1955).</remarks>
</member><member name="M:atcMetCmp.modMetCompute.WindTravelFromWindSpeed(atcData.atcTimeseries,atcData.atcTimeseriesSource)">
	<summary>
 compute daily total wind travel (mi) from average daily wind speed (mph)
 </summary>
	<param name="aWindSpeed"></param>
	<param name="aSource"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.DisSolPet(atcData.atcTimeseries,atcData.atcTimeseriesSource,System.Int32,System.Double)">
	<summary>
 Disaggregate daily SOLAR or PET to hourly
 </summary>
	<param name="aInTs">input timeseries to be disaggregated</param>
	<param name="aDataSource"></param>
	<param name="aDisOpt">1 does Solar, DisOpt = 2 does PET</param>
	<param name="aLatDeg">Latitude, in degrees</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.SolarRadiationValueFromCloudCover(System.Double@,System.Double@,System.Int32@,System.Int32@)">
	<summary>
 Computes the total daily solar radiation based on
 the HSPII (Hydrocomp, 1978) RADIATION procedure, which is based
 on empirical curves of radiation as a function of latitude
 (Hamon et al, 1954, Monthly Weather Review 82(6):141-146.
 </summary>
	<param name="aDegLat"></param>
	<param name="aCloud"></param>
	<param name="aMon"></param>
	<param name="aDay"></param>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.CloudCoverValueFromSolar(System.Double@,System.Double@,System.Int32@,System.Int32@)">
	<summary>
 Computes daily cloud cover based on daily solar radiation.
 </summary>
	<param name="aDegLat"></param>
	<param name="aDayRad"></param>
	<param name="aMon"></param>
	<param name="aDay"></param>
	<returns>Daily cloud cover value</returns>
	<remarks>
 NOTE:  This routine makes what is likely a gross assumption - 
 that percent sun, and thus, cloud cover is essentially the ratio
 of actual solar radiation to potential max solar radiation.
 Max solar radiation is based on the above routine (RadClc), which uses
 the HSPII (Hydrocomp, 1978) RADIATION procedure, which is based
 on empirical curves of radiation as a function of latitude
 (Hamon et al, 1954, Monthly Weather Review 82(6):141-146.
</remarks>
</member><member name="M:atcMetCmp.modMetCompute.PanEvaporationValueComputedByHamon(System.Int32,System.Int32,System.Double[],System.Double,System.Double,System.Boolean,System.Double)">
	<summary>
 Generates daily pan evaporation (inches) using a coefficient for the month, the possible hours of
 sunshine (computed from latitude), and absolute humidity.
 The computations are based on the Hamon (1961) formula.
 </summary>
	<param name="aMonth">Month</param>
	<param name="aDay">Day</param>
	<param name="aCTS">Array of monthly coefficients</param>
	<param name="aLatDeg">Latitude, in degrees</param>
	<param name="aTAVC">Average daily temperature (C)</param>
	<param name="aDegF">Temperature in Fahrenheit (True) or Celsius (False)</param>
	<param name="aMissingValue">Value to return if problem occurs</param>
	<returns>Daily PET value</returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modMetCompute.PanEvaporationValueComputedByPenman(System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 Compute daily pan evaporation (inches)
 </summary>
	<param name="aMinTmp">daily minimum air temperature (degF)</param>
	<param name="aMaxTmp">daily maximum air temperature (degF)</param>
	<param name="aDewTmp">dewpoint temperature (degF)</param>
	<param name="aWindSp">wind movement (miles/day)</param>
	<param name="aSolRad">solar radiation (langleys/day)</param>
	<returns>pan evaporation (inches/day)</returns>
	<remarks>based on the Penman(1948) formula and the method of Kohler, Nordensen, and Fox (1955).</remarks>
</member><member name="M:atcMetCmp.modPenmanMonteith_SWAT.PanEvaporationTimeseriesComputedByPenmanMonteith(System.Double,atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseriesSource,atcMetCmp.SwatWeatherStation,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
	<summary></summary>
	<param name="aElevation"></param>
	<param name="aPrecipitationTS"></param>
	<param name="aAirTemperatureTS"></param>
	<param name="aSource"></param>
	<param name="aSwatWeatherStation"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modPenmanMonteith_SWAT.PanEvaporationTimeseriesComputedByPenmanMonteith(System.Double,atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseries,atcData.atcTimeseriesSource,atcMetCmp.SwatWeatherStation,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean)">
	<summary>This version accomodates the use of prepared daily precip, min, max air temp, assuming SI units (mm, C) by default</summary>
	<param name="aElevation">Elevation in meter</param>
	<param name="aPrecipitationTS">Daily precip in mm</param>
	<param name="aAirTemperatureTSMin">Daily min air temp in C</param>
	<param name="aAirTemperatureTSMax">Daily max air temp in C</param>
	<param name="aSource">Data source</param>
	<param name="aSwatWeatherStation">SWAT Wthr Stn object</param>
	<param name="aEnglishUnit">Inputs are in English unit (Elevft, PRECinch, TEMPF), if true, then output is in English unit (inch PMET)</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modPenmanMonteith_SWAT.PanEvaporationValueComputedbyPenmanMonteith(System.Double,System.Double,atcMetCmp.SwatWeatherStation,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
	<summary></summary>
	<param name="aJDate"></param>
	<param name="aElevation"></param>
	<param name="aStation"></param>
	<param name="aAirTemperatureMin"></param>
	<param name="aAirtemperatureMax"></param>
	<param name="aPrecipitation"></param>
	<param name="aCo2Conc"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modPenmanMonteith_SWAT.Dstn(System.Single,System.Single)">
	<summary>
	</summary>
	<param name="aV1"></param>
	<param name="av2"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:atcMetCmp.modPenmanMonteith_SWAT">
	<summary>Computes PenmanMonteith PET based on code from SWAT 2005</summary>
	<remarks></remarks>
</member><member name="M:atcMetCmp.modSWAT_MetUtil.SolarRadiation(System.Double,System.Double,System.Double,System.Double,System.Double)">
	<summary>
 generates daily solar radiation 
 </summary>
	<param name="aPrecip">precipitation for the day(mm H2O)</param>
	<param name="aFracWetDays">proportion of wet days in a month</param>
	<param name="aSolarRadiationAver">average daily solar radiation for the month(MJ/m^2/day)</param>
	<param name="aSolarRadiationMax">maximum possible radiation for the day in HRU(MJ/m^2)</param>
	<param name="aPrecImpactParm">parameter which predicts impact of precip on daily solar radiation</param>
	<returns>solar radiation for the day (MJ/m^2)</returns>
	<remarks>based on SWAT 2005 routine 'slrgen'</remarks>
</member><member name="M:atcMetCmp.modSWAT_MetUtil.SaturationVaporPressure(System.Double)">
	<summary>
 calculate saturation vapor pressure for a given air temperature
 </summary>
	<param name="aTemperatureAir">air temperature (deg C)</param>
	<returns>saturation vapor pressure (kPa)</returns>
	<remarks>based on SWAT 2005 routine 'ee'</remarks>
</member><member name="M:atcMetCmp.modSWAT_MetUtil.Wind(System.Double,atcMetCmp.UniformDistribution)">
	<summary>
 generate daily wind speed
 </summary>
	<param name="aWindMonthlyAverage">average wind speed for the month(m/s)</param>
	<param name="aWindSpeedDistribution">wind speed distribution</param>
	<returns>daily wind speed(m/s)</returns>
	<remarks>based on SWAT 2005 routine 'wndgen'</remarks>
</member><member name="T:atcMetCmp.modSWAT_MetUtil">
	<summary>
 Excerpted and translated routines from SWAT 
 </summary>
	<remarks>function and subroutine names are taken from SWAT, variable names updated to meet BASINS conventions</remarks>
</member><member name="M:atcMetCmp.SwatWeatherStation.#ctor(atcUtility.atcTable)">
	<summary>Fill specific details about point from record in table</summary>
	<param name="aTable">table containing locations</param>
	<remarks>uses current record from table</remarks>
</member><member name="M:atcMetCmp.SwatWeatherStation.Key">
	<summary></summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcMetCmp.UniformDistribution.Generate">
	<summary>
 Generate a random numbers ranging from 0.0 to 1.0.
 In the process of calculating the random number, the seed (x1) is set to a new value.
 This function implements the prime-modulus generator xi = 16807 xi Mod(2**(31) - 1)
 using code which ensures that no intermediate result uses more than 31 bits
 </summary>
	<returns>random number between 0.0 and 1.0</returns>
	<remarks>
 the theory behind the code is summarized in Bratley, P., B.L. Fox and L.E. Schrage. 1983. A Guide to Simulation.
 Springer-Verlag, New York. (pages 199-202), based on code in SWAT2005
 </remarks>
</member><member name="M:atcMetCmp.TriangularDistribution.Generate(System.Single,System.Single,System.Single)">
	<summary>
 Generate a random number from a triangular distribution
 given X axis points at start, end, and peak Y value
 </summary>
	<param name="aT1">lower limit for distribution</param>
	<param name="aT2">monthly mean for distribution</param>
	<param name="aT3">upper limit for distribution</param>
	<returns>daily value generated for distribution</returns>
	<remarks></remarks>
</member>
</members>
</doc>