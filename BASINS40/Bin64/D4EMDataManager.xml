<?xml version="1.0"?>
<doc>
<assembly>
<name>
D4EMDataManager
</name>
</assembly>
<members>
<member name="P:D4EMDataManager.IDataExtension.Name">
	<summary>Unique name that users will see that identifies this extension.</summary>
</member><member name="P:D4EMDataManager.IDataExtension.Description">
	<summary>Longer version of <see cref="P:D4EMDataManager.IDataExtension.Name">Name</see> with room to expand acronyms</summary>
</member><member name="P:D4EMDataManager.IDataExtension.Author">
	<summary>A company name, individual, or organization name.</summary>
</member><member name="P:D4EMDataManager.IDataExtension.Version">
	<summary>Version number of the extension.</summary>
	<remarks>
 Can either return a hard-coded string such as "1.0.0.1" or use
 GetVersionInfo to dynamically return the version number from the assembly itself.
 </remarks>
</member><member name="P:D4EMDataManager.IDataExtension.QuerySchema">
	<summary>
 XML specification of what function(s) this extension can perform
 and what can or must be specified as parameters for each function.
 </summary>
	<remarks>
 XML string may be replaced by a custom-designed class
 </remarks>
</member><member name="M:D4EMDataManager.IDataExtension.Execute(System.String)">
	<summary>Perform a function that was described in QuerySchema.</summary>
	<remarks>
 Values must be included in the query for all required parameters.
 Return type is to be determined.
 </remarks>
</member><member name="T:D4EMDataManager.IDataExtension">
	<summary>
     Interface for pluggable extensions that operate on data
 </summary>
</member><member name="M:D4EMDataManager.clsOverlayReclassify.Overlay(System.String,D4EMDataManager.clsLayer,System.Collections.Generic.List{D4EMDataManager.clsLayer},System.Boolean)">
	<summary>
 Overlay the grid and/or shape layers in aLayers
 For each unique combination, add an entry to Me.HruTable,
 and put the index of the combination in Me.HruTable into a new grid named aGridOutputFilename
 </summary>
	<param name="aGridOutputFileName">Grid file name to write </param>
	<param name="aGridSlopeValue"></param>
	<param name="aLayers"></param>
	<param name="aResume"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.clsOverlayReclassify.Simplify(System.Collections.Generic.List{System.String},atcUtility.atcCollection,System.String,System.Double,System.Double,System.String)">
	<summary>
 Simplify a collection of HRUs by dissolving those with areas below a threshold into similar HRUs
 </summary>
	<param name="aLayerTags">Tag names used for each field of the HRUs</param>
	<param name="aSubBasinTable">Collection of clsHruTable items, one clsHruTable for each subbasin, obtainable from clsHruTable.SummarizeByTag("SubBasin")</param>
	<param name="aTag">Tag of layer to dissolve, or "Area" to decide by area of HRU</param>
	<param name="aIgnoreBelowFraction">Threshold as a fraction (between zero and 1) of the area of the subbasin</param>
	<param name="aIgnoreBelowAbsolute">Threshold as an absolute area</param>
	<param name="aGridOverlayFileName">Grid containing HRU indexes</param>
	<returns>Table of HRUs from which those representing small [aTag] have been removed and remaining HRUs have been expanded to preserve total area</returns>
	<remarks></remarks>
</member><member name="F:D4EMDataManager.clsHruTable.Tags">
	<summary>
 One tag for each layer contributing to HRU key, in same order as clsHru.Key and clsHru.Ids
 </summary>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.clsHruTable.#ctor(System.Collections.Generic.List{System.String})">
	<summary>
 Create empty HRU table with the given set of layer tags
 </summary>
	<param name="aTags">One tag for each layer contributing to HRU key, in same order as clsHru.Key and clsHru.Ids</param>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.clsHruTable.#ctor(System.String)">
	<summary>
 Create HRU table by reading saved table from file
 </summary>
	<param name="aFilename">full path of file to read</param>
</member><member name="M:D4EMDataManager.clsHruTable.GetKeyForItem(D4EMDataManager.clsHru)">
	<summary>
 Get the key for the KeyedCollection base class
 </summary>
	<param name="aHru">item to get key of</param>
</member><member name="M:D4EMDataManager.clsHruTable.Id(D4EMDataManager.clsHru,System.String)">
	<summary>
 Return the part of the key for the given HRU corresponding to the given layer tag
 </summary>
	<param name="aHru">HRU whose layer value is requested</param>
	<param name="aTag">Tag of layer whose value for this HRU is requested</param>
</member><member name="M:D4EMDataManager.clsHruTable.Save(System.String)">
	<summary>
 Save contents of this table to a text file
 </summary>
	<param name="aFilename">Full path of file to save in</param>
</member><member name="M:D4EMDataManager.clsHruTable.Sort(System.Boolean,System.String)">
	<summary>
	</summary>
	<param name="aDescending"></param>
	<param name="aTag">Tag to sort by, if omitted sort by cell count</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.clsHruTable.SplitByTag(System.String)">
	<summary>
 Split this table into a collection of smaller tables.
 One new table is created for each unique value of aTag.
 All elements sharing the same value of aTag are placed in the same resulting table.
 </summary>
	<param name="aTag">Name of tag to split by</param>
	<remarks>returned collection is keyed by the unique tag value of each table</remarks>
</member><member name="M:D4EMDataManager.clsHruTable.SummarizeByTag(System.Collections.Generic.List{System.String})">
	<summary>
 Recursively split and sort by each given tag
 If aSortTags contains only one tag, returns collection of tables from SplitByTag.
 If aSortTags contains more than one tag, split by the first one then return a collection of collections
 from recursive calls on tags after the first one.
 </summary>
	<param name="aSortTags">Tags to group by</param>
	<returns>collection of resulting tables or collections for each value of the first aSortTag</returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.clsHruTable.ReadReclassifyCSV(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.String)">
	<summary>
 Read a comma-separated values text file of IDs to change from and to
 First column must contain values to change from and values must be unique.
 Second column must contain values to change to and may contain duplicates.
 </summary>
	<param name="aCsvFileName">Full path of file to read</param>
	<param name="aOriginalIDs">return parameter containing values to change from</param>
	<param name="aNewIds">return parameter containing values to change to</param>
	<remarks>useful before calling Reclassify</remarks>
</member><member name="M:D4EMDataManager.clsHruTable.Reclassify(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
	<summary>
 Change values in all HRUs with tag value
 aTag=[a value in aChangeFromValues]
 to 
 aTag=[value at same index in aChangeToValues]
 </summary>
	<param name="aTag"></param>
	<param name="aChangeFromValues"></param>
	<param name="aChangeToValues"></param>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.clsHruTable.EnsureUnique">
	<summary>
 Scan all existing HRUs and consolidate any with matching keys
 </summary>
	<remarks>
 When combining two HRUs:
 Slope mean is recomputed as area-weighted average
 Cell count and area are sums of existing values
 </remarks>
</member><member name="M:D4EMDataManager.clsLayer.Reopen">
	<summary>
 Reopening layer can conserve memory, especially if there is a leak
 </summary>
</member><member name="M:D4EMDataManager.NetworkOperations.RemoveFlowlinesWithoutCatchment(System.IO.StreamWriter,System.String,System.String,System.String,System.String)">
	<summary>
 Eliminate flowlines which do not have corresponding catchments
 </summary>
	<param name="aLog">destination for log messages, Nothing to use MapWinUtility.Logger</param>
	<param name="aFlowlinesFileName">source flowlines shape file name</param>
	<param name="aCatchmentFileName">source catchment shape file name</param>
	<param name="aNewFlowlinesFilename">destination flowlines shape file name</param>
	<param name="aNewCatchmentFilename">destination catchment shape file name</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.NetworkOperations.RemoveBraidedFlowlines(System.IO.StreamWriter,System.String,System.String,System.String,System.String)">
	<summary>
 Eliminate secondary flowlines which are in the same catchment as another flowline
 </summary>
	<param name="aLog">destination for log messages, Nothing to use MapWinUtility.Logger</param>
	<param name="aFlowlinesFileName">source flowlines shape file name</param>
	<param name="aCatchmentFileName">source catchment shape file name</param>
	<param name="aNewFlowlinesFilename">destination flowlines shape file name</param>
	<param name="aNewCatchmentFilename">destination catchment shape file name</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.NetworkOperations.MergeShortFlowlinesOrSmallCatchments(System.IO.StreamWriter,System.String,System.String,System.Double,System.Double,System.String,System.String)">
	<summary>
 Eliminate flowlines which do not have corresponding catchments
 </summary>
	<param name="aLog">destination for log messages, Nothing to use MapWinUtility.Logger</param>
	<param name="aFlowlinesFileName">source flowlines shape file name</param>
	<param name="aCatchmentFileName">source catchment shape file name</param>
	<param name="aNewFlowlinesFilename">destination flowlines shape file name</param>
	<param name="aNewCatchmentFilename">destination catchment shape file name</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.NetworkOperations.CopyAndOpenNewShapefile(System.IO.StreamWriter,System.String,System.String)">
	<summary>
 Copy existing shape file to a new name and open the new one for editing
 If new file already exists, it is removed first
 </summary>
	<param name="aLog"></param>
	<param name="aOldFilename"></param>
	<param name="aNewFilename"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.NetworkOperations.FindRecords(MapWinGIS.Shapefile,System.Int32,System.Int64)">
	<summary>
 Return record indexes of shapes with value in aFieldIndex matching aValue
 </summary>
	<param name="aShapeFile">shapes to search</param>
	<param name="aFieldIndex">field index to check</param>
	<param name="aValue">value of field to match</param>
	<returns>list of Integer record indexes</returns>
</member><member name="M:D4EMDataManager.NetworkOperations.CombineFlowlines(System.IO.StreamWriter,MapWinGIS.Shapefile,System.Int32,System.Int32,System.Boolean,System.Boolean,D4EMDataManager.NetworkOperations.FieldIndexes,System.Collections.Generic.List{System.Int64})">
	<summary>
 Combines NHDPlus flowline shapes and attributes
 </summary>
	<param name="aFlowlinesShapeFile">Flowline shape file</param>
	<param name="aSourceBaseIndex">Record number of flowline to be kept</param>
	<param name="aSourceDeletingIndex">Record number of flowline to be merged and deleted</param>
	<param name="aMergeShapes">True to keep all flowline segments, False to keep only base segments</param>
	<param name="aKeepCosmeticRemovedLine">True to keep a flowline in the layer even when it is removed from connectivity</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:D4EMDataManager.SpatialOperations.AddProcessStepToLayer(System.String,System.String)">
	<summary>
 Add to XML metadata for a layer
 </summary>
	<param name="aProcessStep">contents of new "procstep" entry</param>
	<param name="aLayerFilename">Full path of main layer, metadata is saved in aLayerFilename.xml</param>
</member><member name="M:D4EMDataManager.SpatialOperations.ProjectAndClipShapeLayer(System.String,System.String,System.String,D4EMDataManager.Region,System.String)">
	<summary>
 Project (and optionally clip) all the shape files in aFolder or its subfolders
 </summary>
	<param name="aShapeFilename">Folder containing shape files to process</param>
	<param name="aNativeProjection">Projection of shape files before calling</param>
	<param name="aDesiredProjection">New projection desired for shape files</param>
	<param name="aClipRegion">Optional area to clip to before projecting</param>
</member><member name="M:D4EMDataManager.SpatialOperations.ProjectAndClipShapeLayers(System.String,System.String,System.String,D4EMDataManager.Region)">
	<summary>
 Project (and optionally clip) all the shape files in aFolder or its subfolders
 </summary>
	<param name="aFolder">Folder containing shape files to process</param>
	<param name="aNativeProjection">Projection of shape files before calling</param>
	<param name="aDesiredProjection">New projection desired for shape files</param>
	<param name="aClipRegion">Optional area to clip to before projecting</param>
</member><member name="M:D4EMDataManager.SpatialOperations.ProjectGrid(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
	<summary>
 Project a grid using a new progress level
 </summary>
</member><member name="M:D4EMDataManager.SpatialOperations.HUC8List(System.String)">
	<summary>
 Returns the list of 8-digit HUCs in the given 2, 4, or 6-digit HUC
 </summary>
	<param name="aHUC">2, 4, or 6-digit HUC</param>
	<returns>list of 8-digit HUCs as List of strings</returns>
</member><member name="M:D4EMDataManager.SpatialOperations.CheckPlaceNames(System.String,System.String)">
	<summary>
 Check for and process a new copy of concise place names from USGS topical gazetteer
 </summary>
	<param name="aFolder">Folder containing concise place names and created shape files</param>
	<returns>instructions for adding any newly created layers</returns>
	<remarks>download new place names from http://geonames.usgs.gov/domestic/download_data.htm </remarks>
</member><member name="M:D4EMDataManager.DataManager.#ctor(System.Collections.ICollection)">
	<summary>
 Create a new instance of DataManager
 </summary>
	<param name="aPlugins">Plugin manager</param>
</member><member name="P:D4EMDataManager.DataManager.AvailableExtensions">
	<summary>Return all loaded extension classes</summary>
</member><member name="M:D4EMDataManager.DataManager.AvailableFunctions(System.String)">
	<summary>Return all functions available</summary>
	<param name="aQueryToMatch">
     Return only functions that match this query
 </param>
	<remarks>
 QuerySchema from all loaded extensions are searched for matches
 XML string may be replaced by a custom class that holds queries
 </remarks>
</member><member name="M:D4EMDataManager.DataManager.XMLtoCollection(System.String)">
	<summary>Convert XML string into an atcCollection</summary>
</member><member name="M:D4EMDataManager.DataManager.XMLtoCollection(System.Xml.XmlDocument)">
	<summary>Convert Chilkat.Xml object into an atcCollection</summary>
</member><member name="M:D4EMDataManager.DataManager.AvailableFunctions(atcUtility.atcCollection)">
	<summary>Return all functions available</summary>
	<param name="aQueryToMatch">
     Return only functions that match this query
 </param>
	<remarks>
 QuerySchema from all loaded extensions are searched for matches
 </remarks>
</member><member name="M:D4EMDataManager.DataManager.Execute(System.String)">
	<summary>Perform a function that was described in QuerySchema.</summary>
	<remarks>
 If values are included for all required parameters, no user interaction
 will be required.
 </remarks>
</member><member name="T:D4EMDataManager.DataManager">
	<summary>Manages a set of available Data Extensions and a set of currently open data</summary>
</member><member name="M:D4EMDataManager.Region.GetKeysOfOverlappingShapes(System.String,System.String,System.String)">
	<summary>
 Overlay this region on a shape file and returns a value from the
 shape table for each shape that overlaps this region.
 Example: return the list of county FIPS codes that overlap the region.
 </summary>
	<param name="aSelectFromShapeFilename">Select shapes from this layer</param>
	<param name="aKeyField">Name or index of field in shape DBF to get values from</param>
	<param name="aSelectFromShapeProjection">Projection of aSelectFromShapeFilename, Nothing=get projection from the layer</param>
	<returns>List of values from aKeyField of shapes overlapping this Region</returns>
</member><member name="M:D4EMDataManager.Region.GetKeysOfOverlappingShapes(MapWinGIS.Shapefile,System.Int32,System.String)">
	<summary>
 Overlay this region on a shape file and returns a value from the
 shape table for each shape that overlaps this region.
 Example: return the list of county FIPS codes that overlap the region.
 </summary>
	<param name="aSelectFromLayer">Select shapes from this layer</param>
	<param name="aKeyField">Zero-indexed field in aSelectFromLayer</param>
	<param name="aSelectFromShapeProjection">Projection of aSelectFromLayer, Nothing=get projection from aSelectFromLayer</param>
	<returns>List of values from aKeyField of shapes overlapping this Region</returns>
</member><member name="M:D4EMDataManager.Region.CopyFields(MapWinGIS.Shapefile@,MapWinGIS.Shapefile@)">
	<summary>
 Copies all fields from the inputSF .dbf table to the resultSF table.
 </summary>
	<param name="inputSF">The shapefile with fields to be copied.</param>
	<param name="resultSF">The result shapefile that will inherit the fields.</param>
	<returns>False if an error was encountered, true otherwise.</returns>
</member>
</members>
</doc>