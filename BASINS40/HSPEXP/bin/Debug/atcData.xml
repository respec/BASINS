<?xml version="1.0"?>
<doc>
<assembly>
<name>
atcData
</name>
</assembly>
<members>
<member name="P:atcData.atcSeasonBase.SeasonSelected(System.Int32)">
	<summary>
 True if specified season index is selected, False if it is not
 </summary>
	<param name="aSeasonIndex">Index of season to get/set selection of</param>
</member><member name="P:atcData.atcSeasonBase.SeasonsSelected">
	<summary>
 Integer ArrayList containing SeasonIndex of selected seasons
 </summary>
</member><member name="M:atcData.atcSeasonBase.SeasonsSelectedString(System.Boolean)">
	<summary>
 List of selected season names
 </summary>
	<param name="aXML">True to get list formatted as XML, False for plain text</param>
</member><member name="M:atcData.atcSeasonBase.AllSeasonsInDates(System.Double[])">
	<summary>
 Returns an ArrayList containing all the unique season indexes which correspond to dates in the given array
 </summary>
	<param name="aDates">Dates to search for seasons</param>
</member><member name="M:atcData.atcTimeseries.op_Addition(atcData.atcTimeseries,atcData.atcTimeseries)">
	<summary>
 adds each value in two timseries
 </summary>
	<param name="aTimeseries1">first timeseries</param>
	<param name="aTimeseries2">second timeseries</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Addition(atcData.atcTimeseries,System.Double)">
	<summary>
 adds a constant to each value in a timeseries
 </summary>
	<param name="aTimeseries">timeseries</param>
	<param name="aValue">constant</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Subtraction(atcData.atcTimeseries,atcData.atcTimeseries)">
	<summary>
 subtract each value in a timseries from each value in another timeseries
 </summary>
	<param name="aTimeseries1">timeseries to subtract from</param>
	<param name="aTimeseries2">timeseries to subtract</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Subtraction(atcData.atcTimeseries,System.Double)">
	<summary>
 subtract a constant from each value in a timeseries
 </summary>
	<param name="aTimeseries">timeseries</param>
	<param name="aValue">constant</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Multiply(atcData.atcTimeseries,atcData.atcTimeseries)">
	<summary>
 multipliply each value in a timeseries by each value in another timeseries
 </summary>
	<param name="aTimeseries1">first timeseries</param>
	<param name="aTimeseries2">second timeseries</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Multiply(atcData.atcTimeseries,System.Double)">
	<summary>
 multiplies each value in a timeseries by a constant
 </summary>
	<param name="aTimeseries">timeseries</param>
	<param name="aValue">constant</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Division(atcData.atcTimeseries,atcData.atcTimeseries)">
	<summary>
 divide each value in a timeseries by each value in another timeseries
 </summary>
	<param name="aTimeseries1">first timeseries</param>
	<param name="aTimeseries2">second timeseries</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Division(atcData.atcTimeseries,System.Double)">
	<summary>
 divide each value in a timeseries by a constant
 </summary>
	<param name="aTimeseries">timeseries</param>
	<param name="aValue">constant</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Exponent(atcData.atcTimeseries,atcData.atcTimeseries)">
	<summary>
 raise each value in a timeseries to an exponent specified by each value in another timeseries
 </summary>
	<param name="aTimeseries1">first timeseries</param>
	<param name="aTimeseries2">second timeseries</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseries.op_Exponent(atcData.atcTimeseries,System.Double)">
	<summary>
 raise each value in a timeseries to an exponent specified by a constant
 </summary>
	<param name="aTimeseries">timeseries</param>
	<param name="aValue">constant</param>
	<returns>timeseries</returns>
	<remarks></remarks>
</member><member name="P:atcData.atcTimeseries.Value(System.Int32)">
	<summary>Set or get an individual value</summary>
</member><member name="M:atcData.atcTimeseries.FirstNumeric">
	<summary>First number in Values that is not NaN or Infinity, NaN if no numeric values</summary>
</member><member name="P:atcData.atcTimeseries.Values">
	<summary>Set or get the entire array of values</summary>
</member><member name="M:atcData.atcTimeseries.ValueAttributesGetValue(System.Int32,System.String,System.Object)">
	<summary>Get the value of an attribute 
 without creating pValueAttributes or pValueAttributes(index)</summary>
</member><member name="M:atcData.atcTimeseries.ValueAttributesExist(System.Int32)">
	<summary>Get whether a ValueAttribute exists by index</summary>
</member><member name="M:atcData.atcTimeseries.ValueAttributeDefinitions">
	<summary>Get list of ValueAttribute definitions present</summary>
</member><member name="P:atcData.atcTimeseries.ValueAttributes(System.Int32)">
	<summary>Attributes associated with individual data values</summary>
	<remarks>May be used to store data quality flags or other metadata.</remarks>
</member><member name="P:atcData.atcTimeseries.Dates">
	<summary>Each value in Dates is the instant of measurement or the end of the interval</summary>
	<remarks>
 Dates are julian days since the start of 1900. 
 Fractional part of a date is time of day.
 </remarks>
</member><member name="M:atcData.atcTimeseries.Clear">
	<summary>Clear all values and attributes, but not dates.</summary>
</member><member name="M:atcData.atcTimeseries.Clone">
	<summary>Make a copy of the current dataset and return it</summary>
</member><member name="M:atcData.atcTimeseries.Clone(atcData.atcTimeseriesSource)">
	<summary>Make a clone of the current dataset that refers to a different data source</summary>
</member><member name="M:atcData.atcTimeseries.#ctor(atcData.atcTimeseriesSource)">
	<summary>Create a new timeseries and reference the source that it came from</summary>
</member><member name="P:atcData.atcTimeseries.numValues">
	<summary>Number of data values in data set</summary>
</member><member name="M:atcData.atcTimeseries.EnsureValuesRead">
	<summary>Make sure values have been read from the source.</summary>
</member><member name="P:atcData.atcTimeseries.ValuesNeedToBeRead">
	<summary>True if we have read the header and not all the values (to save time and memory)</summary>
	<remarks>
     Should only be changed by the
     <see cref="T:atcData.atcDataSource">atcDataSource</see> that reads this
     timeseries (aFile from New)
 </remarks>
</member><member name="M:atcData.atcTimeseries.IndexOfValue(System.Double,System.Boolean)">
	<summary>Return index of aValue or -1 if not found</summary>
</member><member name="M:atcData.atcTimeseries.OriginalParent">
	<summary>Original parent timeseries of this timeseries</summary>
	<returns>Timeseries containing original parent of this timeseries, determined recursively</returns>
	<remarks>If no parent, returns this timeseries</remarks>
</member><member name="M:atcData.atcTimeseries.SetInterval">
	<summary>Set Interval attribute of timeseries based on time unit and time step attributes</summary>
	<remarks>Unknown time units leads to removal of Interval attribute</remarks>
</member><member name="M:atcData.atcTimeseries.SetInterval(atcUtility.modDate.atcTimeUnit,System.Int32)">
	<summary>Set Interval attribute of timeseries based on time unit and time step</summary>
	<param name="aTimeUnit">Unit of time (hour, day, month, etc.)</param>
	<param name="aTimeStep">Number of Time Units in one interval</param>
	<remarks>Unknown or greater than daily time units leads to removal of Interval attribute</remarks>
</member><member name="T:atcData.atcTimeseries">
	<summary>Base class for timeseries data</summary>
</member><member name="P:atcData.frmSelectData.AvailableData">
	<summary>
 The datasets available for selection. 
 Set this property before calling AskUser or by default all datasets in all open data sources will be available.
 </summary>
</member><member name="M:atcData.frmSelectData.lstCriteria_KeyDownGrid(atcControls.atcGrid,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Scroll list to show first item whose beginning matches what the user is typing
 </summary>
	<param name="aGrid">atcGrid to scroll</param>
	<param name="e">KeyDown Event Args</param>
	<remarks>Typing more than one character in a row is supported. 
 If an item is not found that starts with the multiple typed characters, 
 search is reset to find an item starting with just the most recently typed character.
 Pressing a key for a non-printable character (for example Backspace) resets search.</remarks>
</member><member name="M:atcData.atcTimeseriesGroupBuilder.AddValues(System.DateTime,System.Double[])">
	<summary>
 Add a values to the set of timeseries being built
 </summary>
	<param name="aDate">Date that these values share</param>
	<param name="aValues">Set of values to add, one for each timeseries being built</param>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseriesGroupBuilder.Builder(System.String)">
	<summary>
 Retrieve or create the builder for the dataset with the specified key
 </summary>
	<param name="aDataSetKey"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:atcData.atcDataAttributes.SharedAttributes">
	<summary>
 Optional storage of attributes that are shared with other data sets, Nothing if not in use.
 </summary>
</member><member name="F:atcData.atcDataAttributes.pAttributes">
	<summary>
 Attributes are stored here, keyed by name
 </summary>
</member><member name="F:atcData.atcDataAttributes.pAllAliases">
	<summary>Attribute Name Aliases</summary>
</member><member name="F:atcData.atcDataAttributes.pAllDefinitions">
	<summary>All of the atcAttributeDefinitions in use</summary>
</member><member name="F:atcData.atcDataAttributes.pDateFormat">
	<summary>Format to use for dates in GetFormattedValue</summary>
</member><member name="M:atcData.atcDataAttributes.PreferredName(System.String@)">
	<summary>Get the preferred alias of the given attribute name</summary>
	<param name="aAttributeName">name to search for an alias of</param>
	<returns>preferred alias</returns>
	<remarks>returns given attribute name unchanged if there is no preferred alias</remarks>
</member><member name="M:atcData.atcDataAttributes.AttributeNameToKey(System.String)">
	<summary>
 Returns lowercase key for use in Me and pAllDefinitions
 </summary>
	<param name="aAttributeName"></param>
	<returns>lowercase key</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcDataAttributes.GetDefinition(System.String,System.Boolean)">
	<summary>
 Retrieve the atcAttributeDefinition for aAttributeName
 </summary>
	<param name="aAttributeName">Name of definition to return</param>
	<param name="aCreate">If a definition by this name does not already exist, True creates a new definition, False returns Nothing</param>
	<returns>AttributeDefinition</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcDataAttributes.AddHistory(System.String)">
	<summary>
 Append to the set of history items at the next available index, starting at 1
 </summary>
	<param name="aNewEvent">Description of what happened at this point in history</param>
</member><member name="M:atcData.atcDataAttributes.ValuesSortedByName">
	<summary>
 The names (as keys) and values of all attributes that are set. (sorted by name)
 </summary>
</member><member name="M:atcData.atcDataAttributes.ChangeTo(atcData.atcDataAttributes)">
	<summary>
 Discard existing attributes and add the ones in aNewItems instead
 </summary>
	<param name="aNewItems"></param>
</member><member name="M:atcData.atcDataAttributes.Clone">
	<summary>
 Create a copy containing all attributes even if Definition.CopiesInherit = False
 </summary>
</member><member name="M:atcData.atcDataAttributes.Copy">
	<summary>
 Create a copy containing the attributes whose Definition.CopiesInherit = True
 </summary>
</member><member name="M:atcData.atcDataAttributes.CalculateAll">
	<summary>
 Calculate all the known attributes that can be calculated with no additional arguments
 </summary>
</member><member name="M:atcData.atcDataAttributes.DiscardCalculated">
	<summary>
 Discard any calculated attributes. Useful after changing values.
 </summary>
	<remarks>Does not affect SharedAttributes.</remarks>
</member><member name="M:atcData.atcDataAttributes.IsSimple(atcData.atcAttributeDefinition,System.String,atcData.atcDefinedValue@)">
	<summary>
 True if the attribute defined by aDef is of a simple type (Single, Double, Integer, Boolean, String, atcTimeUnit, atcCollection)
 and is not calculated or can be calculated from just one atcTimeseries
 </summary>
	<param name="aDef">Definition to test for simplicity</param>
	<param name="aKey">Optional aKey is the attribute key, passing it is allowed for performance</param>
	<param name="aOperation">Optional aOperation will be set to the operation definition that calculates the attribute</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:atcData.atcDataAttributes">
	<summary>
		<para>
         Store attributes (and calculate some attributes if given an <see cref="T:atcData.atcTimeseries">atcTimeseries</see>)
     </para>
	</summary>
	<remarks>Attributes are stored as a collection of atcDefinedValue</remarks>
</member><member name="M:atcData.atcDataPlugin.#ctor">
	<summary>create a new atcDataPlugin</summary>
</member><member name="P:atcData.atcDataPlugin.Icon">
	<summary></summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcData.atcDataPlugin.NewOne">
	<summary>Calls the version of New with no arguments.</summary>
	<remarks>Inheriting classes that have no New w/o arguments must override.</remarks>
</member><member name="P:atcData.atcDataPlugin.Category">
	<summary>Groups related of plugins together in the UI</summary>
	<remarks>Suggested categories include "File", "Computation", and "Download"</remarks>
</member><member name="P:atcData.atcDataPlugin.Name">
	<summary>
 String that appears in the MapWindow Plug-ins menu to identify this plug-in.
 </summary>
	<requirements>
 Must be overridden in inheriting class to return something unique or plugin will not load.
 </requirements>
</member><member name="P:atcData.atcDataPlugin.Author">
	<summary>A company name, individual, or organization name.</summary>
</member><member name="P:atcData.atcDataPlugin.Description">
	<summary>Longer version of <see cref="P:atcData.atcDataPlugin.Name">Name</see> with room to expand acronyms</summary>
	<remarks>Appears in the plug-ins dialog box when a user selects this plug-in.</remarks>
</member><member name="P:atcData.atcDataPlugin.BuildDate">
	<summary>Date plug-in was built.</summary>
	<remarks>
 Either return a string of a hard-coded date such as "January 1, 2003" or
 dynamically obtain the build date of the assembly.
 </remarks>
</member><member name="P:atcData.atcDataPlugin.Version">
	<remarks>
 Can either return a hard-coded string such as "1.0.0.1" or use<br/>
 GetVersionInfo to dynamically return the version number from the assembly itself.
 </remarks>
	<summary>Version number of the plug-in</summary>
</member><member name="M:atcData.atcDataPlugin.Initialize(MapWindow.Interfaces.IMapWin,System.Int32)">
	<summary>Fired when the plugin is loaded 
 (by the plug-in dialog, the plugins menu, or at program start).
 </summary>
	<remarks>
 A good time to add buttons to the tool bar or menu items to the menu.<br/>
 Save a reference to the IMapWin that is passed for later access to MapWindow.
 </remarks>
</member><member name="M:atcData.atcDataPlugin.Terminate">
	<summary>Fired when the plugin is unloaded
 (by the plugin dialog, the plugins menu, or on program exit).
 </summary>
	<remarks>
 Remove any buttons from the tool bar or menu items from the menu that this plugin
 added.<br/>
 If you don't do this, then you will leave dangling menus and buttons that don't do
 anything.
 </remarks>
</member><member name="M:atcData.atcDataPlugin.ItemClicked(System.String,System.Boolean@)">
	<summary>Fires when a menu item or toolbar button is clicked.
 If this plugin added a button or menu on the Initialize event, 
 this is where those events are handled.
 </summary>
</member><member name="M:atcData.atcDataPlugin.LayerRemoved(System.Int32)">
	<summary>Fires when the user removes a layer from MapWindow.<br/>
 Useful if this plug-in depends on a particular layer being present, 
 or if it keeps an internal list of layers.
 </summary>
</member><member name="M:atcData.atcDataPlugin.LayersAdded(MapWindow.Interfaces.Layer[])">
	<summary>Fires when the user adds a layer to MapWindow. 
 Useful in the same cases as <see cref="M:atcData.atcDataPlugin.LayerRemoved(System.Int32)">LayerRemoved</see>
	</summary>
</member><member name="M:atcData.atcDataPlugin.LayersCleared">
	<summary>Fires when the user clears all of the layers from MapWindow.</summary>
	<remarks>Useful in the same cases as <see cref="M:atcData.atcDataPlugin.LayerRemoved(System.Int32)">LayerRemoved</see></remarks>
</member><member name="M:atcData.atcDataPlugin.LayerSelected(System.Int32)">
	<summary>Fires when a user selects a layer in the legend.</summary>
</member><member name="M:atcData.atcDataPlugin.LegendDoubleClick(System.Int32,MapWindow.Interfaces.ClickLocation,System.Boolean@)">
	<summary>Fires when a user double-clicks a layer in the legend.</summary>
</member><member name="M:atcData.atcDataPlugin.LegendMouseDown(System.Int32,System.Int32,MapWindow.Interfaces.ClickLocation,System.Boolean@)">
	<summary>Fires when a user holds a mouse button down in the legend.</summary>
</member><member name="M:atcData.atcDataPlugin.LegendMouseUp(System.Int32,System.Int32,MapWindow.Interfaces.ClickLocation,System.Boolean@)">
	<summary>Fires when a user releases a mouse button in the legend.</summary>
</member><member name="M:atcData.atcDataPlugin.MapDragFinished(System.Drawing.Rectangle,System.Boolean@)">
	<summary>Fires after a user draws a box with the mouse on the map</summary>
	<remarks>Bounds specifies the box that was "drawn"</remarks>
</member><member name="M:atcData.atcDataPlugin.MapExtentsChanged">
	<summary>Fires any time there is a zoom or pan that changes the map extents.</summary>
</member><member name="M:atcData.atcDataPlugin.MapMouseDown(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
	<summary>Fires when the user presses a mouse button on the map.
 The x and y are screen coordinates in pixels.
 </summary>
	<remarks>
 If map coordinates are needed, use g_MapWin.View.PixelToProj() where g_MapWin is
 a saved reference to MapWin from Initialize
 </remarks>
</member><member name="M:atcData.atcDataPlugin.MapMouseMove(System.Int32,System.Int32,System.Boolean@)">
	<summary>Fires when the user moves the mouse over the map.
 See <see cref="M:atcData.atcDataPlugin.MapMouseDown(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">MapMouseDown</see>.
 </summary>
</member><member name="M:atcData.atcDataPlugin.MapMouseUp(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
	<summary>Fires when the user releases a mouse button over the map.
 See <see cref="M:atcData.atcDataPlugin.MapMouseDown(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">MapMouseDown</see>.
 </summary>
</member><member name="M:atcData.atcDataPlugin.Message(System.String,System.Boolean@)">
	<summary>Plugins can communicate with each other using Messages.
 If a message is sent then this event fires.
 </summary>
	<remarks>Set Handled=True to stop the message from being sent to any more 
 plugins.</remarks>
</member><member name="M:atcData.atcDataPlugin.ProjectLoading(System.String,System.String)">
	<summary>Fires when a project is opened in MapWindow.</summary>
	<param name="aProjectFile">file name including path of the project that was 
 opened.</param>
	<param name="aSettingsString">
 contains the string of data that is connected to this plugin and was stored in
 the project in a ProjectSaving event.
 </param>
</member><member name="M:atcData.atcDataPlugin.ProjectSaving(System.String,System.String@)">
	<summary>Fires when a project is saved in MapWindow.</summary>
	<param name="aProjectFile">file name including path of the project that is being 
 saved.</param>
	<param name="aSettingsString">
 be set to any string of data that is connected to this plugin<br/>
 which should be stored in the project file.
 </param>
</member><member name="M:atcData.atcDataPlugin.ShapesSelected(System.Int32,MapWindow.Interfaces.SelectInfo)">
	<summary>Fires when the user selects one or more shapes
 using the select tool in MapWindow.</summary>
	<param name="aHandle">Layer handle for the shapefile on which shapes were 
 selected.</param>
	<param name="aSelectInfo">holds information about the shapes that were 
 selected.</param>
</member><member name="P:atcData.atcDataPlugin.SerialNumber">
	<summary>Deprecated - do NOT use</summary>
	<remarks>Leftover part of IPlugin interface no longer in use</remarks>
</member><member name="T:atcData.atcDataPlugin">
	<summary>
		<para>Base class for plugins that can read, write, manipulate, or display atcData</para>
	</summary>
	<remarks>
		<para>This class implements MapWindow.Interfaces.IPlugin so it can be loaded by 
     the MapWindow plugin code</para>
		<para>Name must be overridden with a unique name for a child class to be loaded as a plugin. 
     Others may be overridden if desired.</para>
	</remarks>
</member><member name="T:atcData.atcDataSource.EnumExistAction">
	<summary>
 Enumeration of actions to take is data already exists
 </summary>
	<remarks></remarks>
</member><member name="P:atcData.atcDataSource.Attributes">
	<summary>
 Attributes associated with all the DataSets from this instance of this source (location, constituent, etc.)
 </summary>
</member><member name="P:atcData.atcDataSource.AvailableOperations">
	<summary>
		<see cref="T:atcData.atcDataAttributes">atcDataAttributes</see>
     Operations supported by this source
 </summary>
	<remarks>defaults to an empty list (nothing available)</remarks>
</member><member name="P:atcData.atcDataSource.DataSets">
	<summary>atcDataSet objects currently in this source</summary>
	<value>atcDataGroup</value>
</member><member name="P:atcData.atcDataSource.CanOpen">
	<summary>True if Open is implemented (data can be read)</summary>
</member><member name="P:atcData.atcDataSource.CanSave">
	<summary>True if Save is implemented (data can be saved)</summary>
</member><member name="P:atcData.atcDataSource.CanRemoveDataset">
	<summary>True if RemoveDataset is implemented</summary>
</member><member name="M:atcData.atcDataSource.Clear">
	<summary>Remove this source from memory</summary>
</member><member name="M:atcData.atcDataSource.Open(System.String,atcData.atcDataAttributes)">
	<summary>
 Opens source and reads enough to determine whether it is correct type.
 </summary>
	<param name="aSpecification"> 
     file name, connect string, or other string needed to open
 </param>
	<param name="aAttributes">
     additional information which may be used for opening and will be saved as Attributes
 </param>
	<returns>Boolean - True if successfully opened.</returns>
</member><member name="M:atcData.atcDataSource.ReadData(atcData.atcDataSet)">
	<summary>Read all the data into an atcDataSet (which must be from this source).</summary>
	<remarks>Called only from within atcData.EnsureValuesRead.</remarks>
</member><member name="M:atcData.atcDataSource.Save(System.String,atcData.atcDataSource.EnumExistAction)">
	<summary>Save all current data to a new file or save recently updated data to current file if SaveFileName = Me.FileName</summary>
	<returns>Boolean - True if successful</returns>
	<param name="aSaveFileName">Name of file to save data into</param>
	<param name="aExistAction">Action to take if data already present in file</param>
	<remarks>Save must be overridden to be used, atcDataSource does not implement.</remarks>
</member><member name="P:atcData.atcDataSource.Specification">
	<summary>
 For file data sources, Specification = file name including full path
 For database or web download, the query or URL used to get the data
 For computation, the name of the computation that is being performed
 </summary>
	<remarks>Should only be set by inheriting class, only during Open or Save</remarks>
</member><member name="P:atcData.atcDataSource.Filter">
	<summary>
 For file data sources, filter is file name selection filter for use in file dialog
 </summary>
	<remarks>Should only be set by inheriting class, only during Open or Save</remarks>
</member><member name="M:atcData.atcDataSource.AddDataSet(atcData.atcDataSet,atcData.atcDataSource.EnumExistAction)">
	<returns>Boolean - True if dataset added, False otherwise</returns>
	<param name="aDs">dataset to add to data source</param>
	<param name="aExistAction">action to take if dataset already exists in data source</param>
	<summary>Add a dataset to this data source</summary>
</member><member name="M:atcData.atcDataSource.AddDataSets(atcData.atcDataGroup)">
	<summary>
	</summary>
	<param name="aDataGroup"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcData.atcDataSource.#ctor">
	<summary>Create a new data source</summary>
</member><member name="M:atcData.atcDataSource.View">
	<summary>
 View the native source (generally a file) 
 </summary>
	<remarks>must override for non text sources (see atcWDM for example)</remarks>
</member><member name="T:atcData.atcDataSource">
	<summary>Base class for data sources</summary>
</member><member name="M:atcData.atcTimeseriesGroup.#ctor(atcData.atcTimeseries)">
	<summary>Create a new timeseries group and add a timeseries
 to the group with the default key of its serial number</summary>
</member><member name="M:atcData.atcTimeseriesGroup.#ctor(atcData.atcTimeseries[])">
	<summary>Create a new timeseries group and add timeseries
 to the group with the default key of its serial number</summary>
</member><member name="M:atcData.atcTimeseriesGroup.#ctor(atcData.atcDataGroup)">
	<summary>Create a new group containing the same timeseries as aDataGroup</summary>
</member><member name="M:atcData.atcTimeseriesGroup.Clone">
	<summary>Create a copy of this data group containing references to the same group of atcTimeseries</summary>
	<remarks>Does not create copies of each atcTimeseries, clone refers to same objects as original</remarks>
</member><member name="P:atcData.atcTimeseriesGroup.Item(System.Int32)">
	<summary>atcTimeseries by index</summary>
</member><member name="P:atcData.atcTimeseriesGroup.ItemByIndex(System.Int32)">
	<summary>atcTimeseries by index</summary>
</member><member name="P:atcData.atcTimeseriesGroup.ItemByKey(System.Object)">
	<summary>atcTimeseries by key</summary>
</member><member name="P:atcData.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:atcData.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:atcData.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:atcData.atcDataSet.Attributes">
	<summary>Attributes associated with the whole data set(location, constituent, etc.)</summary>
</member><member name="M:atcData.atcDataSet.Clear">
	<summary>Reset data attributes to an empty collection</summary>
</member><member name="M:atcData.atcDataSet.Clone">
	<summary>Create a new data set with identical attributes to current one</summary>
</member><member name="M:atcData.atcDataSet.#ctor">
	<summary>Create a new data set</summary>
</member><member name="P:atcData.atcDataSet.Serial">
	<summary>Unique serial number assigned when data object is created</summary>
</member><member name="M:atcData.atcDataSet.op_Equality(atcData.atcDataSet,atcData.atcDataSet)">
	<summary>
 Test for equality by testing whether these datasets have the same serial number
 </summary>
	<param name="aArg1">One dataset to compare to the other</param>
	<param name="aArg2">The other dataset to compare to the one</param>
	<returns>True if datasets have same serial number</returns>
	<remarks>False even if values in datasets (other than serial number) match each other exactly</remarks>
</member><member name="M:atcData.atcDataSet.op_Inequality(atcData.atcDataSet,atcData.atcDataSet)">
	<summary>Exact opposite of the operator = </summary>
</member><member name="M:atcData.atcDataSet.ToString">
	<summary>String describing this DataSet</summary>
</member><member name="M:atcData.atcDataSet.SetStringFormat(System.String[],System.String)">
	<summary>Build a default format string with all arguments separated by 
 spaces</summary>
</member><member name="T:atcData.atcDataSet">
	<summary>Base class for data.</summary>
</member><member name="M:atcData.atcChooseDataGroupDates.Reset">
	<summary>
 Set all the controls to default values from current DataGroup
 </summary>
</member><member name="T:atcData.atcDataTool">
	<summary><para>Base class for plugins that use atcData</para></summary>
</member><member name="M:atcData.atcDataDisplay.Show">
	<summary>Show the specified data interactively.</summary>
</member><member name="M:atcData.atcDataDisplay.Save(atcData.atcDataGroup,System.String,System.String[])">
	<summary>Save contents of data display to specified file</summary>
	<remarks>
 not ToString because the data display may have graphics that don't convert well
 to a string
 </remarks>
</member><member name="T:atcData.atcDataDisplay">
	<summary><para>Base class for plugins that display atcData</para></summary>
</member><member name="M:atcData.atcTimeseriesBuilder.NumValues">
	<summary>
 Number of values that have been added to this builder so far
 </summary>
</member><member name="P:atcData.atcTimeseriesBuilder.LogNonNumeric">
	<summary>
 True to log when non-numeric values are added
 </summary>
</member><member name="M:atcData.atcTimeseriesBuilder.AddValue(System.DateTime,System.Double)">
	<summary>
 Append a date and value to the timeseries being built 
 </summary>
	<param name="aDate"></param>
	<param name="aValue"></param>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseriesBuilder.AddValue(System.Double,System.String)">
	<summary>
 Append a value and date to the timeseries being built
 </summary>
	<param name="aDate">Date corresponding to the value</param>
	<param name="aValue">a number or non-numeric value to append</param>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseriesBuilder.AddValue(System.Double,System.Double)">
	<summary>
 Append a value and date to the timeseries being built
 </summary>
	<param name="aDate">Date corresponding to the value</param>
	<param name="aValue">a number to append to the timeseries</param>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseriesBuilder.AddValueAttribute(System.String,System.Object)">
	<summary>
 Add an attribute to the most recently added value
 </summary>
	<param name="aAttributeName">Name of attribute to add</param>
	<param name="aAttributeValue">Value of attribute to add</param>
	<remarks></remarks>
</member><member name="M:atcData.atcTimeseriesBuilder.AddValueAttributes(atcData.atcDataAttributes)">
	<summary>
 Add a set of attributes to the most recently added value
 </summary>
	<param name="aAttributes">Attributes to add</param>
</member><member name="M:atcData.modTimeseriesMath.FindDateAtOrAfter(System.Double[],System.Double,System.Int32)">
	<summary>Search through an array of dates looking for a date </summary>
	<param name="aDatesToSearch">Array of dates to search</param>
	<param name="aDate">Date to search for</param>
	<param name="aStartAt">Index of data to begin search at (default is 0)</param>
	<returns>Index of first date on or after date searched for</returns>
	<remarks></remarks>
</member><member name="M:atcData.modTimeseriesMath.SubsetByDate(atcData.atcTimeseries,System.Double,System.Double,atcData.atcTimeseriesSource)">
	<summary>Creates a timeseries copied from orginal that only contains dates within specifed range</summary>
	<param name="aTimeseries">Original timeseries</param>
	<param name="aStartDate">Starting Julian date</param>
	<param name="aEndDate">Ending Julian date</param>
	<param name="aDataSource">Data Source to assign to newly created subset timeseries, can be 'Nothing'</param>
	<returns>Reference to new timeseries</returns>
	<remarks>if aDataSource is 'Nothing' only a reference to a new timeseries is returned</remarks>
</member><member name="M:atcData.modTimeseriesMath.SubsetByDateBoundary(atcData.atcTimeseries,System.Int32,System.Int32,atcData.atcTimeseriesSource,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Trim a timeseries if needed to make it start and end at the desired year boundary.
 Useful when complete calendar or water years are needed.
 </summary>
	<param name="aTimeseries">Original timeseries</param>
	<param name="aStartMonth">Month containing first value of the year</param>
	<param name="aStartDay">Day containing first value of the year</param>
	<param name="aDataSource">Data Source to assign to newly created subset timeseries, can be Nothing</param>
	<param name="aFirstYear">Optional first year of data to include in subset</param>
	<param name="aLastYear">Optional last year of data to include in subset</param>
	<param name="aEndMonth">Optional month containing last value of the year</param>
	<param name="aEndDay">Optional day containing last value of the year</param>
	<returns>New subset timeseries</returns>
	<remarks>
 If omitted or zero, aFirstYear or aLastYear will not be used to limit the subset.
 If omitted or zero, aEndMonth/aEndDay will default to the day before aStartMonth/aStartDay.
 </remarks>
</member><member name="M:atcData.modTimeseriesMath.CopyBaseAttributes(atcData.atcTimeseries,atcData.atcTimeseries,System.Int32,System.Int32,System.Int32)">
	<summary>Copy any attributes that copies inherit from aFromDataSet into aToDataSet</summary>
	<param name="aFromDataset">Dataset containing attributes to copy</param>
	<param name="aToDataSet">Dataset to copy attributes into</param>
	<param name="aNumValues">Number of values to copy value attributes of</param>
	<param name="aStartFrom">Start index for copying value attributes from</param>
	<param name="aStartTo">Start index for copying value attributes to</param>
	<remarks>Copies only general attributes if aNumValues is omitted or is less than 1, 
 Also copies value attributes if aNumValues &gt; 0</remarks>
</member><member name="M:atcData.modTimeseriesMath.MergeTimeseries(atcData.atcTimeseriesGroup,System.Boolean)">
	<summary>Merge a group of atcTimeseries</summary>
	<param name="aGroup">Group of atcTimeseries to merge</param>
	<param name="aFilterNoData">True to skip missing values, False to include missing values in result</param>
	<returns>atcTimeseries containing all unique dates from the group</returns>
	<remarks>Each atcTimeseries in aGroup is assumed to be in order by date within itself.
 If duplicate dates exist in aGroup, some values will be left out of result.</remarks>
</member><member name="M:atcData.modTimeseriesMath.CommonDates(atcData.atcTimeseriesGroup,System.Double@,System.Double@,System.Double@,System.Double@)">
	<summary>
 Find the first starting date, last ending date, and common time period of a group of Timeseries
 </summary>
	<param name="aGroup">Group to search for start and end dates</param>
	<param name="aFirstStart">Earliest start date of any timeseries in group (beginning of interval for constant interval)</param>
	<param name="aLastEnd">Latest ending date of any timeseries in group</param>
	<param name="aCommonStart">Beginning of the period shared by all in group (beginning of interval for constant interval)</param>
	<param name="aCommonEnd">Ending of the period shared by all in group</param>
	<returns>True if there is a common period of all timeseries in the group, false if one timeseries begins only after another ends.</returns>
	<remarks>All arguments except aGroup are ByRef</remarks>
</member><member name="M:atcData.modTimeseriesMath.MergeDates(atcData.atcTimeseriesGroup,System.Boolean)">
	<summary>Merge the dates from a group of atcTimeseries</summary>
	<param name="aGroup">Group of atcTimeseries to merge the dates of</param>
	<param name="aFilterNoData">True to skip missing values, False to include missing values in result</param>
	<returns>atcTimeseries containing all unique dates from the group</returns>
	<remarks>Each atcTimeseries in aGroup is assumed to be in order by date within itself.</remarks>
</member><member name="M:atcData.modTimeseriesMath.GetNextDateIndex(atcData.atcTimeseries,System.Boolean,System.Int32@,System.Double@)">
	<summary></summary>
	<param name="aTs"></param>
	<param name="aFilterNoData"></param>
	<param name="aIndex"></param>
	<param name="aNextDate"></param>
	<remarks></remarks>
</member><member name="M:atcData.modTimeseriesMath.FillValues(atcData.atcTimeseries,atcUtility.modDate.atcTimeUnit,System.Int64,System.Double,System.Double,System.Double,atcData.atcTimeseriesSource)">
	<summary>Fill values in constant interval timeseries with specified values.</summary>
	<param name="aOldTSer">Timeseries to fill</param>
	<param name="aTU">Time units (1-sec, 2-min, 3-hour, 4-day, 5-month, 6-year, 7-century)</param>
	<param name="aTS">Timestep (number of units of aTU per time step)</param>
	<param name="aFillVal">Value to Fill data gaps with.</param>
	<param name="aMissVal">Value indicating missing data.</param>
	<param name="aAccumVal">Value indicating accumulated data.</param>
	<param name="aDataSource"></param>
	<returns>Filled timeseries</returns>
	<remarks>
 Assumes dates are at the end of each value's interval and that the
 0th position in the Dates array is the beginning of the first interval.
 </remarks>
</member><member name="M:atcData.modTimeseriesMath.FillMissingByInterpolation(atcData.atcTimeseries,System.Double,System.Collections.ArrayList,System.Double)">
	<summary>
 Fill missing periods in a timeseries using interpolation
 </summary>
	<param name="aOldTSer">Timeseries containing missing values</param>
	<param name="aMaxFillLength">Max span, in Julian Days, over which interpolation is allowed</param>
	<param name="aFillInstances">Array returning length of each missing period filled</param>
	<param name="aMissingValue">Missing value indicator</param>
	<returns>atcTimeseries clone of original timeseries along with interpolated values</returns>
	<remarks></remarks>
</member><member name="M:atcData.modTimeseriesMath.Aggregate(atcData.atcTimeseries,atcUtility.modDate.atcTimeUnit,System.Int32,atcUtility.modDate.atcTran,atcData.atcTimeseriesSource)">
	<summary>Aggregate specified timeseries to interval specified</summary>
	<param name="aTimeseries">Timeseries to aggregate</param>
	<param name="aTU">Time units to aggregate to</param>
	<param name="aTS">Time step to aggregate to (number of time units)</param>
	<param name="aTran">Transformation to use in aggregation</param>
	<param name="aDataSource">Data Source to assign to newly created subset timeseries, can be Nothing</param>
	<returns>Aggregated timeseries</returns>
	<remarks></remarks>
</member><member name="M:atcData.modTimeseriesMath.NewDates(System.Double,System.Double,atcUtility.modDate.atcTimeUnit,System.Int32)">
	<summary>
 Build a constant-interval date array
 </summary>
	<param name="aStartDate">Beginning of the first interval</param>
	<param name="aEndDate">End of the last interval</param>
	<param name="aTU">Time Units</param>
	<param name="aTS">Time Step (number of Time Units per step)</param>
</member><member name="M:atcData.modTimeseriesMath.BinarySearchFirstGreaterDoubleArrayList(System.Collections.ArrayList,System.Double)">
	<summary>
 Binary search through an ArrayList containing Double values sorted in ascending order
 </summary>
	<param name="aArray">Array to search</param>
	<param name="aValue">Value to search for</param>
	<returns>Return the index of the first value &gt;= aValue</returns>
	<remarks>Returns aArray.Count if aArray contains no values &gt;= aValue</remarks>
</member><member name="M:atcData.modTimeseriesMath.ComputeRanks(atcData.atcTimeseries,System.Boolean,System.Boolean)">
	<summary>
 Assign integers from one to the number of non-missing values to the Rank value attributes
 </summary>
	<param name="aTimeseries">Values to compute ranks of</param>
	<param name="aLowToHigh">If True, lowest value gets rank of 1, if False, highest value gets rank of 1</param>
	<param name="aAllowTies">
 If True, identical values get the same rank and next rank is not assigned, ex: (5, 5, 9, 7) get ranks (1, 1, 4, 3)
 If False and aLowToHigh is False, earlier value gets lower rank (5, 5, 9, 7) get ranks (1, 2, 4, 3) 
 If False and aLowToHigh is True, later value gets lower rank (5, 5, 9, 7) get ranks (2, 1, 4, 3) 
 </param>
	<remarks></remarks>
</member><member name="M:atcData.modTimeseriesMath.ComputePercentileSum(atcData.atcTimeseries,System.Double)">
	<summary>Compute sum value at specified percentile of specified timeseries</summary>
	<param name="aTimeseries">Timeseries to analyze.</param>
	<param name="aPercentile">Percentile to compute.</param>
	<remarks>Computed percentile stored in attribute within timeseries with attribute name built from percentile value prefixed with '%Sum'</remarks>
</member><member name="M:atcData.modTimeseriesMath.ComputePercentile(atcData.atcTimeseries,System.Double)">
	<summary>Compute value at specified percentile of specified timeseries</summary>
	<param name="aTimeseries">Timeseries to analyze.</param>
	<param name="aPercentile">Percentile to compute.</param>
	<remarks>Computed percentile stored in attribute within timeseries with attribute name built from percentile value prefixed with '%'</remarks>
</member><member name="M:atcData.modTimeseriesMath.FitLine(atcData.atcTimeseries,atcData.atcTimeseries,System.Double@,System.Double@,System.Double@)">
	<summary>
 fit a line through a set of data points using least squares regression.
 </summary>
	<param name="aTSerX"></param>
	<param name="aTSerY"></param>
	<param name="aACoef">'a' coefficient in regression line (y=ax+b)</param>
	<param name="aBCoef">'b' coefficient in regression line (y=ax+b)</param>
	<param name="aRSquare">'r squared', the coefficient of determination</param>
	<remarks>from fortran-newaqt-FITLIN; x, y values can't be the same values</remarks>
</member><member name="M:atcData.modTimeseriesMath.DoMath(System.String,atcData.atcDataAttributes)">
	<summary>Perform a math operation on one or more timeseries</summary>
	<param name="aOperationName">Math operation</param>
	<param name="aArgs">Arguments needed by math operation</param>
	<returns>Timeseries containing result of math operation</returns>
	<remarks>Args are each usually either Double or atcTimeseries</remarks>
</member><member name="T:atcData.modTimeseriesMath">
	<summary>Math utility functions</summary>
</member><member name="P:atcData.atcDataManager.MapWindow">
	<summary>Pointer to the root interface for MapWindow 4</summary>
</member><member name="M:atcData.atcDataManager.DatasetsAtMapSelectedLocations">
	<summary>
 Return the currently loaded datasets whose Location attribute matches a currently selected shape on the map
 </summary>
</member><member name="M:atcData.atcDataManager.MapLayerLocationField(atcUtility.atcTableDBF)">
	<summary>
 Return the one-based location field index in the layer DBF
 </summary>
	<param name="aLayerDBF">Table to find a location field in. Contains one row per shape.</param>
	<remarks>
 Uses file layers.dbf to determine which field in the layer's dbf contains locations.
 Base layer file name is in first column, location field index is in fourth column.
 If layers.dbf is not found or layer is not found in it, scans aLayerDBF for a field 
 named in pLikelyShapeLocationFieldNames.
 </remarks>
</member><member name="M:atcData.atcDataManager.MapSelectedLocations">
	<summary>
 Returns list of locations (as string) of currently selected shapes on the map
 Returns empty list if there is no dbf for the current layer or if location field cannot be determined
 </summary>
</member><member name="E:atcData.atcDataManager.OpenedData">
	<summary>Event raised when a data source is opened</summary>
</member><member name="E:atcData.atcDataManager.ClosedData">
	<summary>Event raised when a data source is closed</summary>
</member><member name="M:atcData.atcDataManager.#ctor">
	<summary>Create a new instance of atcDataManager</summary>
</member><member name="M:atcData.atcDataManager.Clear">
	<summary>Sets data manager to its initial state.
          Defaults Datasources, Selection Attributes and Display Attributes.
 </summary>
</member><member name="P:atcData.atcDataManager.DataSources">
	<summary>Set of atcTimeseriesSource objects representing currently open DataSources</summary>
</member><member name="M:atcData.atcDataManager.DataSets">
	<summary>Set of atcDataSets found in currently open DataSources</summary>
</member><member name="P:atcData.atcDataManager.SelectionAttributes">
	<summary>Names of attributes used for selection of data in UI</summary>
</member><member name="M:atcData.atcDataManager.SelectionAttributesSet(System.Collections.IEnumerable)">
	<summary>
 Set the selection attributes to a new collection of values, or set to defaults if Nothing
 </summary>
	<param name="aNewValues">New collection of values to use for selection, if nothing, default values are used</param>
</member><member name="P:atcData.atcDataManager.DisplayAttributes">
	<summary>Names of attributes used for listing of data in UI</summary>
</member><member name="M:atcData.atcDataManager.DisplayAttributesSet(System.Collections.IEnumerable)">
	<summary>
 Set the display attributes to a new collection of values, or set to defaults if Nothing
 </summary>
	<param name="aNewValues">New collection of values to use for selection, if nothing, default values are used</param>
</member><member name="M:atcData.atcDataManager.GetPlugins(System.Type)">
	<summary>Currently loaded plugins that inherit the specified class; returns empty objects</summary>
	<param name="aBaseType">
		<para>Type of plugin to match and return</para>
	</param>
</member><member name="M:atcData.atcDataManager.LoadPlugin(System.String)">
	<summary>
 Activate the named plugin
 </summary>
	<param name="aPluginName">Name of plugin to activate</param>
	<remarks></remarks>
</member><member name="M:atcData.atcDataManager.OpenDataSource(atcData.atcTimeseriesSource,System.String,atcData.atcDataAttributes)">
	<summary>Open BASINS data source</summary>
	<param name="aNewSource">
		<para>Instance of data source that can open the specified data</para>
	</param>
	<param name="aSpecification">
		<para>File name, connection string, or other information needed to initialize aNewSource</para>
	</param>
	<param name="aAttributes">
		<para>Attributes associated with specification, may be NOTHING</para>
	</param>
	<returns>Boolean - True if source opened, False otherwise</returns>
</member><member name="M:atcData.atcDataManager.DataSourceByName(System.String)">
	<summary>Creates and returns an instance of a data source by name</summary>
	<param name="aDataSourceName">
		<para>Name of data source to create and return</para>
	</param>
</member><member name="M:atcData.atcDataManager.DataSourceBySpecification(System.String)">
	<summary>
 Get a data source that is already open by its specification
 </summary>
	<param name="aSpecification">The file name for file-based data sources</param>
	<returns>the data source if it is already open, Nothing if it is not open</returns>
	<remarks>
 Searching for a match is not case sensitive but it can be fooled if two different specifications refer to the same file
 Always use consistent full path of files
 Use OpenDataSource to open one that is not yet open
 </remarks>
</member><member name="M:atcData.atcDataManager.UserSelectDataSource(System.Collections.ArrayList,System.String,System.Boolean,System.Boolean,System.Drawing.Icon)">
	<summary>Ask user to select a data source</summary>
	<param name="aCategories">
		<para>Filter to limit user choices</para>
	</param>
	<param name="aTitle">
		<para>Title of window</para>
	</param>
	<param name="aNeedToOpen">
		<para>True to only include data sources that can open</para>
	</param>
	<param name="aNeedToSave">
		<para>True to only include data sources that can save</para>
	</param>
</member><member name="M:atcData.atcDataManager.UserSelectData(System.String,atcData.atcDataGroup,atcData.atcDataGroup,System.Boolean,System.Boolean)">
	<summary>
	</summary>
	<param name="aTitle">Optional title for dialog window, default is 'Select Data'</param>
	<param name="aSelected">Optional pre-selected group of data, default is no data already selected</param>
	<param name="aAvailable">Optional group of all data available for selection, default is all open data</param>
	<param name="aModal">Optional modality specification for window, default is True</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:atcData.atcDataManager.UserSelectData(System.String,atcData.atcDataGroup,atcData.atcDataGroup,System.Boolean,System.Boolean,System.Drawing.Icon)">
	<summary>
	</summary>
	<param name="aTitle">Title for dialog window</param>
	<param name="aSelected">pre-selected group of data</param>
	<param name="aAvailable">group of all data available for selection</param>
	<param name="aModal">modality specification for window</param>
	<param name="aCancelReturnsOriginalSelected">choice of whether Cancel returns an empty group or the aSelected that was passed in</param>
	<param name="aIcon">If not nothing, form icon is set to this</param>
	<returns>aSelected is modified and is also returned if aModal is true</returns>
	<remarks></remarks>
</member><member name="M:atcData.atcDataManager.UserManage(System.String,System.Int32,System.Drawing.Icon)">
	<summary>Ask user to manage data sources</summary>
	<param name="aTitle">
		<para>Optional title for dialog window, default is 'Data Sources'</para>
	</param>
</member><member name="P:atcData.atcDataManager.XML">
	<summary>State of data manager in XML format</summary>
</member><member name="T:atcData.atcDataManager">
	<summary>Manages a set of currently open DataSources. 
          Uses the set of plugins currently loaded to find ones that inherit atcTimeseriesSource
 </summary>
</member><member name="M:atcData.atcTimeseriesSource.#ctor">
	<summary>Create a new timeseries source</summary>
</member><member name="T:atcData.atcDefinedValue">
	<summary>A value and its definition</summary>
</member><member name="P:atcData.atcAttributeDefinition.Name">
	<summary>
 Short name, used for labeling in UI
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.CopiesInherit">
	<summary>
 True if attribute should be copied when parent object is copied, false to skip when copying parent object
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.Calculated">
	<summary>
 True if this attribute has a Calculator, False if this attribute does not have a Calculator
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.Calculator">
	<summary>
 The source responsible for calculating this attribute, Nothing if this attribute is not calculated
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.Category">
	<summary>
 Optional, used for grouping similar attributes in UI
 </summary>
</member><member name="M:atcData.atcAttributeDefinition.Clone(System.String,System.String)">
	<summary>
 Create a new copy of this definition
 </summary>
	<param name="aNewName">Optional name for the copy</param>
	<param name="aNewDescription">Optional description of the copy</param>
</member><member name="P:atcData.atcAttributeDefinition.Description">
	<summary>
 Longer than Name but still short
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.Help">
	<summary>
 More detailed version of Description
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.Editable">
	<summary>
 True if the attribute value can be edited by the user, False if user should not be allowed to edit
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.ID">
	<summary>
 Integer Identifier - in WDM, this is set to message file index
 </summary>
</member><member name="M:atcData.atcAttributeDefinition.IsNumeric">
	<summary>
 True if TypeString is Integer, Single or Double, False otherwise
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.TypeString">
	<summary>
 Usually "String", "Integer" or "Double". Default is "String"
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.ValidList">
	<summary>
 List of acceptable values for this attribute
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.DefaultValue">
	<summary>
 Value to use if this attribute does not have a value set, Nothing is the default
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.Min">
	<summary>
 Minimum acceptable numeric value for this attribute (NaN if not set)
 </summary>
</member><member name="P:atcData.atcAttributeDefinition.Max">
	<summary>
 Maximum acceptable numeric value for this attribute (NaN if not set)
 </summary>
</member><member name="T:atcData.atcAttributeDefinition">
	<summary><para>Detailed type information about an attribute value</para></summary>
	<remarks>Does not include the value itself, so different objects 
          can have values which share the same definition
 </remarks>
</member><member name="M:atcData.atcSeasonYears.Reset">
	<summary>
 Set all the controls to default values from current DataGroup
 </summary>
</member><member name="E:atcData.atcDataGroup.Added">
	<summary>One or more <see cref="T:atcData.atcDataSet">atcDataSet</see> were just added</summary>
</member><member name="E:atcData.atcDataGroup.Removed">
	<summary>One or more <see cref="T:atcData.atcDataSet">atcDataSet</see> were just removed</summary>
	<remarks>aRemoved may contain the dataset(s) removed or may be Nothing</remarks>
</member><member name="P:atcData.atcDataGroup.Item(System.Int32)">
	<summary>atcDataSet by index</summary>
</member><member name="P:atcData.atcDataGroup.ItemByIndex(System.Int32)">
	<summary>atcDataSet by index</summary>
</member><member name="P:atcData.atcDataGroup.ItemByKey(System.Object)">
	<summary>atcDataSet by key</summary>
</member><member name="M:atcData.atcDataGroup.#ctor">
	<summary>Create a new empty data group</summary>
</member><member name="M:atcData.atcDataGroup.#ctor(atcData.atcDataSet)">
	<summary>Create a new data group and add a dataset
 to the group with the default key of its serial number</summary>
</member><member name="M:atcData.atcDataGroup.#ctor(atcData.atcDataSet[])">
	<summary>Create a new data group and add datasets
 to the group with the default key of its serial number</summary>
</member><member name="M:atcData.atcDataGroup.Add(atcData.atcDataSet)">
	<summary>Add an <see cref="T:atcData.atcDataSet">atcDataSet</see> 
 to the group with the default key of its serial number </summary>
	<returns>Index at which aDataSet was found or added or -1 if not found or added</returns>
</member><member name="M:atcData.atcDataGroup.Add(System.Object,atcData.atcDataSet)">
	<summary>Add a dataset to the group with the key specified</summary>
</member><member name="M:atcData.atcDataGroup.Add(atcUtility.atcCollection)">
	<summary>Add items from an atcCollection or atcDataGroup to the group.</summary>
</member><member name="M:atcData.atcDataGroup.AddRange(System.Collections.IEnumerable)">
	<summary>Add items from an IEnumerable to the group.</summary>
</member><member name="M:atcData.atcDataGroup.Clear">
	<summary>Remove all datasets and selections from this data group.</summary>
</member><member name="M:atcData.atcDataGroup.Clone">
	<summary>Create a copy of this data group</summary>
</member><member name="M:atcData.atcDataGroup.ChangeTo(atcData.atcDataGroup)">
	<summary>Change this group to match the new group
 and raise the appropriate events.
 </summary>
</member><member name="M:atcData.atcDataGroup.IndexOfSerial(System.Int32)">
	<summary>Determines index of dataset specified by aSerial</summary>
</member><member name="M:atcData.atcDataGroup.Insert(System.Int32,atcData.atcDataSet)">
	<summary>Insert a new dataset at the specified index</summary>
</member><member name="M:atcData.atcDataGroup.RemoveAt(System.Int32)">
	<summary>Remove dataset specified by aIndex from this group.</summary>
	<remarks>
     Cannot just Remove(ItemByIndex(index))
     because this overriding RemoveAt is called by MyBase.Remove--infinite loop
 </remarks>
</member><member name="M:atcData.atcDataGroup.Remove(atcData.atcDataSet)">
	<summary>Remove an <see cref="T:atcData.atcDataSet">atcDataSet</see> from this 
 group.</summary>
</member><member name="M:atcData.atcDataGroup.Remove(atcUtility.atcCollection)">
	<summary>Remove a set of datasets from this group.</summary>
</member><member name="M:atcData.atcDataGroup.RemoveRange(System.Int32,System.Int32)">
	<summary>Remove a span of one or more DataSets from the group by index.</summary>
</member><member name="M:atcData.atcDataGroup.FindData(System.String,System.String,System.Int32)">
	<summary>
 Return a subset of this atcDataGroup containing only the atcDataSets where the named attribute has the given value
 </summary>
	<param name="aAttributeName">Name of Attribute to check</param>
	<param name="aValue">Value that given attribute must have to include dataset in group returned</param>
	<param name="aLimit">Optional limit of how many data sets to return, default of 0 means there is no limit</param>
	<remarks>search for value is not case sensitive</remarks>
</member><member name="M:atcData.atcDataGroup.FindData(System.String,atcUtility.atcCollection,System.Int32)">
	<summary>
 Return a subset of this atcDataGroup containing only the atcDataSets where the named attribute has one of the given values
 </summary>
	<param name="aAttributeName">Name of Attribute to check</param>
	<param name="aValues">Acceptable values for the given attribute to include dataset in group returned</param>
	<param name="aLimit">Optional limit of how many data sets to return, default of 0 means there is no limit</param>
	<remarks>search for value is not case sensitive</remarks>
</member><member name="M:atcData.atcDataGroup.SortedAttributeValues(System.String,System.Object)">
	<summary>
 Return a sorted collection of unique values that data sets in this group have for the given attribute
 </summary>
	<param name="aAttributeName">Name of attribute to find values of</param>
	<param name="aMissingValue">Optional string to use if a dataset does not have a value for the given attribute</param>
</member><member name="M:atcData.atcDataGroup.SortedAttributeValues(atcData.atcAttributeDefinition,System.Object)">
	<summary>
 Return a sorted collection of unique values that data sets in this group have for the given attribute
 </summary>
	<param name="aAttributeDefinition">Attribute to find values of</param>
	<param name="aMissingValue">Optional string to use if a dataset does not have a value for the given attribute</param>
</member><member name="M:atcData.atcDataGroup.ToString">
	<summary>Contents of this class expressed as a string.</summary>
</member><member name="T:atcData.atcDataGroup">
	<summary>Group of atcDataSet objects and associated selection information</summary>
	<remarks>
		<para>Sharable between different views of the same data.</para>
		<para>
         Events are defined to allow different
         <see cref="T:atcData.atcDataDisplay">displays</see>
         to remain synchronized
     </para>
	</remarks>
</member>
</members>
</doc>