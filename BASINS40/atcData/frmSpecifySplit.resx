<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAACwBAAAsAQAAAAAAAAAA
        AABQcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcABPbwJQcAJQcABQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcABPbwJQcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcABPbwJQcAJQcABQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcABQcQBQcQBQcABQcABPbwJQcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcABQcABPcAJQcAJQcAJQcQFP
        bwJQcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcABQcABQcQJ6kj+2w5Xh5tPy9Oru8eXP17iUpWRQcAJQcABQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcABPcABwizLU277+/fz+/vz+
        /v3+/v7+/v7+/v7+/fxQcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBRcAOhsnb29/DK0rCdr3GKn1aOo1uruYTg5c/+/f3+/v5gfRtPcAFQcQBQ
        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
        cQBQcQBQcQBQcABQcQBQcAF7kkLm6tn+/v3//v3+/v7Y38Vshi1QcAJQcABQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBYdw2z
        wJH8/Pn+/v7+/v74+PJQcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcAB5kUDl6df+/v7///9QcAJQcABQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcABQcQBYdg2yv478/PpQcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBPcABQcAF5
        kT9QcAJQcABQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQ
        cQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcQBQcABQcABPbwJQcANPcABPcQBPcQBPcQBPcQBPcQBP
        cQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBPcQBP
        cQBPcQBPcQBPcABPbwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>